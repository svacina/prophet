[{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ChoiceController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST, produces \u003d \"application/json; charset\u003dUTF-8\")\n    public ResponseEntity\u003cList\u003cChoice\u003e\u003e updateChoices(@RequestBody SelectedChoiceEmsDto selectedChoiceEmsDto) {\n        return ResponseEntity.ok(choiceService.selectChoices(selectedChoiceEmsDto));\n    }","returnType":"ResponseEntity\u003cList\u003cChoice\u003e\u003e","methodName":"updateChoices","className":"ChoiceController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ChoiceController.updateChoices","classId":"edu.baylor.ems.controller.ChoiceController","line":19,"msArgumentList":[{"returnType":"SelectedChoiceEmsDto"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"\"application/json; charset\u003dUTF-8\""}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)\n    public ResponseEntity\u003cList\u003cExam\u003e\u003e listAllExams() {\n        List\u003cExam\u003e exams \u003d examService.findAllExams();\n        if(exams.isEmpty()){\n            return new ResponseEntity\u003c\u003e(HttpStatus.NO_CONTENT);\n        }\n        return new ResponseEntity\u003c\u003e(exams, HttpStatus.OK);\n    }","returnType":"ResponseEntity\u003cList\u003cExam\u003e\u003e","methodName":"listAllExams","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.listAllExams","classId":"edu.baylor.ems.controller.ExamController","line":28,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"method","value":"RequestMethod.GET"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/status/{status}\", method \u003d RequestMethod.GET)\n    public ResponseEntity\u003cList\u003cExam\u003e\u003e getExamsByStatus(@PathVariable(\"status\") String status) {\n        List\u003cExam\u003e exams \u003d examService.findAllExamsByStatus(status);\n        if(exams.isEmpty()){\n            return new ResponseEntity\u003c\u003e(HttpStatus.NO_CONTENT);\n        }\n        return new ResponseEntity\u003c\u003e(exams, HttpStatus.OK);\n    }","returnType":"ResponseEntity\u003cList\u003cExam\u003e\u003e","methodName":"getExamsByStatus","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.getExamsByStatus","classId":"edu.baylor.ems.controller.ExamController","line":38,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"method","value":"RequestMethod.GET"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST, produces \u003d \"application/json; charset\u003dUTF-8\")\n    public ResponseEntity\u003cExam\u003e createExam(@RequestBody ExamDto examDto) {\n        Exam exam \u003d examService.saveExam(examDto);\n        emailService.sendExamAssignmentNotification(exam);\n        return new ResponseEntity\u003c\u003e(exam, HttpStatus.CREATED);\n    }","returnType":"ResponseEntity\u003cExam\u003e","methodName":"createExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.createExam","classId":"edu.baylor.ems.controller.ExamController","line":49,"msArgumentList":[{"returnType":"ExamDto"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"\"application/json; charset\u003dUTF-8\""}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.DELETE, produces \u003d \"application/json; charset\u003dUTF-8\")\n    public ResponseEntity\u003cInteger\u003e deleteExam(@PathVariable(\"id\") Integer id) {\n        examService.deleteExam(id);\n        return new ResponseEntity\u003c\u003e(id, HttpStatus.OK);\n    }","returnType":"ResponseEntity\u003cInteger\u003e","methodName":"deleteExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.deleteExam","classId":"edu.baylor.ems.controller.ExamController","line":57,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"\"application/json; charset\u003dUTF-8\""}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/take/{id}\", method \u003d RequestMethod.GET, produces \u003d MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e takeExam(@PathVariable(\"id\") Integer id) {\n        // check ID\n        return examService.takeExam(id);\n    }","returnType":"ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e","methodName":"takeExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.takeExam","classId":"edu.baylor.ems.controller.ExamController","line":64,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"MediaType.APPLICATION_JSON_VALUE"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/submit/{id}\", method \u003d RequestMethod.GET, produces \u003d MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity\u003cExam\u003e submitExam(@PathVariable(\"id\") Integer id) {\n        // check ID\n        return examService.submitExam(id);\n    }","returnType":"ResponseEntity\u003cExam\u003e","methodName":"submitExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.submitExam","classId":"edu.baylor.ems.controller.ExamController","line":71,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"MediaType.APPLICATION_JSON_VALUE"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/finish/{id}\", method \u003d RequestMethod.GET, produces \u003d MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity\u003cObject\u003e finishExam(@PathVariable(\"id\") Integer id) {\n        // check ID\n        return examService.finishExam(id);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"finishExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.finishExam","classId":"edu.baylor.ems.controller.ExamController","line":80,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"MediaType.APPLICATION_JSON_VALUE"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/get/{id}\", method \u003d RequestMethod.GET, produces \u003d MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity\u003cExam\u003e getExam(@PathVariable(\"id\") Integer id) {\n        // check ID\n        return new ResponseEntity\u003c\u003e(examService.findById(id).get(), HttpStatus.CREATED);\n    }","returnType":"ResponseEntity\u003cExam\u003e","methodName":"getExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.getExam","classId":"edu.baylor.ems.controller.ExamController","line":87,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"MediaType.APPLICATION_JSON_VALUE"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin(origins \u003d \"*\")\n    @RequestMapping(value \u003d \"/review/{id}\", method \u003d RequestMethod.GET, produces \u003d MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity\u003cExamReviewDto\u003e reviewExam(@PathVariable(\"id\") Integer id) {\n        ExamReviewDto review \u003d examService.reviewExam(id);\n        return new ResponseEntity\u003cExamReviewDto\u003e(review, HttpStatus.OK);\n    }","returnType":"ResponseEntity\u003cExamReviewDto\u003e","methodName":"reviewExam","className":"ExamController","packageName":"edu.baylor.ems.controller","methodId":"edu.baylor.ems.controller.ExamController.reviewExam","classId":"edu.baylor.ems.controller.ExamController","line":94,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"CrossOrigin","key":"origins","value":"\"*\""},{"isHttpAnnotation":true,"annotationName":"RequestMapping","key":"produces","value":"MediaType.APPLICATION_JSON_VALUE"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/QuestionRepository.java","directoryName":""},"code":"List\u003cQuestion\u003e getAllByExam_Id(Integer id);","returnType":"List\u003cQuestion\u003e","methodName":"getAllByExam_Id","className":"QuestionRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.QuestionRepository.getAllByExam_Id","classId":"edu.baylor.ems.repository.QuestionRepository","line":10,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/ChoiceRepository.java","directoryName":""},"code":"List\u003cChoice\u003e findByQuestionId(Integer id);","returnType":"List\u003cChoice\u003e","methodName":"findByQuestionId","className":"ChoiceRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.ChoiceRepository.findByQuestionId","classId":"edu.baylor.ems.repository.ChoiceRepository","line":10,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/ExamRepository.java","directoryName":""},"code":"Boolean existsByExamineeAndId(Integer examinee, Integer id);","returnType":"Boolean","methodName":"existsByExamineeAndId","className":"ExamRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.ExamRepository.existsByExamineeAndId","classId":"edu.baylor.ems.repository.ExamRepository","line":12,"msArgumentList":[{"returnType":"Integer"},{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/ExamRepository.java","directoryName":""},"code":"@Query(name \u003d Exam.FIND_BY_EXAMINEE)\n    List\u003cExam\u003e findByExaminee(String examineeEmail);","returnType":"List\u003cExam\u003e","methodName":"findByExaminee","className":"ExamRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.ExamRepository.findByExaminee","classId":"edu.baylor.ems.repository.ExamRepository","line":14,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Exam.FIND_BY_EXAMINEE"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/ExamRepository.java","directoryName":""},"code":"@Query(name \u003d Exam.FIND_BY_EXAM_DATE_FROM)\n    List\u003cExam\u003e findByExamDateFrom(int year, int month, int day);","returnType":"List\u003cExam\u003e","methodName":"findByExamDateFrom","className":"ExamRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.ExamRepository.findByExamDateFrom","classId":"edu.baylor.ems.repository.ExamRepository","line":17,"msArgumentList":[{"returnType":"int"},{"returnType":"int"},{"returnType":"int"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Exam.FIND_BY_EXAM_DATE_FROM"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/ExamRepository.java","directoryName":""},"code":"@Query(name \u003d Exam.FIND_BY_EXAM_DATE_TO)\n    List\u003cExam\u003e findByExamDateTo(int year, int month, int day);","returnType":"List\u003cExam\u003e","methodName":"findByExamDateTo","className":"ExamRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.ExamRepository.findByExamDateTo","classId":"edu.baylor.ems.repository.ExamRepository","line":20,"msArgumentList":[{"returnType":"int"},{"returnType":"int"},{"returnType":"int"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Exam.FIND_BY_EXAM_DATE_TO"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/repository/ExamRepository.java","directoryName":""},"code":"@Query(name \u003d Exam.FIND_BY_STATUS)\n    List\u003cExam\u003e findByStatus(Integer statusOrdinal);","returnType":"List\u003cExam\u003e","methodName":"findByStatus","className":"ExamRepository","packageName":"edu.baylor.ems.repository","methodId":"edu.baylor.ems.repository.ExamRepository.findByStatus","classId":"edu.baylor.ems.repository.ExamRepository","line":23,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Exam.FIND_BY_STATUS"}]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public Optional\u003cExam\u003e findById(Integer id) {\n        return this.examRepository.findById(id);\n    }","returnType":"Optional\u003cExam\u003e","methodName":"findById","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.findById","classId":"edu.baylor.ems.service.ExamService","line":30,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public void deleteExam(Integer id) {\n        this.examRepository.deleteById(id);\n    }","returnType":"void","methodName":"deleteExam","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.deleteExam","classId":"edu.baylor.ems.service.ExamService","line":34,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public List\u003cExam\u003e findAllExams() {\n        return this.examRepository.findAll();\n    }","returnType":"List\u003cExam\u003e","methodName":"findAllExams","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.findAllExams","classId":"edu.baylor.ems.service.ExamService","line":38,"msArgumentList":[],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public List\u003cExam\u003e findAllExamsByStatus(String status) {\n\n        List\u003cExam\u003e allExams \u003d findAllExams();\n        List\u003cExam\u003e filteredExams \u003d allExams.stream().filter(item -\u003e item.getStatus()\u003d\u003dExamStatus.valueOf(status)).collect(Collectors.toList());\n\n        return filteredExams;\n    }","returnType":"List\u003cExam\u003e","methodName":"findAllExamsByStatus","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.findAllExamsByStatus","classId":"edu.baylor.ems.service.ExamService","line":42,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public boolean isExamExist(Integer examId, Integer examineeId) {\n        return this.examRepository.existsByExamineeAndId(examineeId, examId);\n    }","returnType":"boolean","methodName":"isExamExist","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.isExamExist","classId":"edu.baylor.ems.service.ExamService","line":50,"msArgumentList":[{"returnType":"Integer"},{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public ResponseEntity\u003cExam\u003e submitExam(Integer examId) {\n        Optional\u003cExam\u003e optionalExam \u003d this.findById(examId);\n        if (!optionalExam.isPresent()) {\n            return new ResponseEntity\u003c\u003e(HttpStatus.NOT_FOUND);\n        }\n        Exam exam \u003d optionalExam.get();\n        exam.setStatus(ExamStatus.DONE);\n        exam.setSubmissionDate(new Date());\n        exam \u003d this.examRepository.saveAndFlush(exam);\n        return new ResponseEntity\u003cExam\u003e(HttpStatus.OK);\n    }","returnType":"ResponseEntity\u003cExam\u003e","methodName":"submitExam","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.submitExam","classId":"edu.baylor.ems.service.ExamService","line":54,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public Exam saveExam(ExamDto examDto) {\n        Exam exam \u003d new Exam(examDto);\n        exam.setExamDate(new Date());\n        exam.setConfigurationName(qmsService.getConfigName(Integer.toUnsignedLong(examDto.getConfigurationId())));\n        exam.setStatus(ExamStatus.INIT);\n        exam.getExamDateFrom().setHours(0);\n        exam.getExamDateFrom().setMinutes(0);\n        exam.getExamDateFrom().setSeconds(0);\n        exam.getExamDateTo().setHours(23);\n        exam.getExamDateTo().setMinutes(59);\n        exam.getExamDateTo().setSeconds(59);\n        if (examDto.getId()!\u003dnull){\n            exam.setId(examDto.getId());\n        }\n\n        return this.examRepository.saveAndFlush(exam);\n    }","returnType":"Exam","methodName":"saveExam","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.saveExam","classId":"edu.baylor.ems.service.ExamService","line":66,"msArgumentList":[{"returnType":"ExamDto"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e takeExam(Integer id) {\n        Optional\u003cExam\u003e optionalExam \u003d this.findById(id);\n        if (!optionalExam.isPresent()) {\n            return new ResponseEntity\u003c\u003e(HttpStatus.NOT_FOUND);\n        }\n        Exam exam \u003d optionalExam.get();\n        //ToDo: Check if exam.getExaminee() \u003d\u003d currentlyLoggedUser\n        ExamStatus examStatus \u003d exam.getStatus();\n        if (examStatus.equals(ExamStatus.INIT)){\n            return handleExamInit(exam);\n        } else if (examStatus.equals(ExamStatus.PROGRESS)){\n            return handleExamProgress(exam);\n\n        } else {\n            // DONE\n            return new ResponseEntity\u003c\u003e(HttpStatus.BAD_REQUEST);\n        }\n    }","returnType":"ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e","methodName":"takeExam","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.takeExam","classId":"edu.baylor.ems.service.ExamService","line":84,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"private ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e handleExamProgress(Exam exam) {\n        // IN PROGRESS\n        Date currentDate \u003d new Date();\n        if (currentDate.before(exam.getExamDate()) || currentDate.equals(exam.getExamDate())){\n            // Return questions associated with this exam \u0026\u0026 prune them\n            return ResponseEntity.ok(this.questionService.getAllByExamPruned(exam));\n        } else {\n            // IN PROGRESS BUT SUBMITTED AFTER DEADLINE\n            if (!exam.getStatus().equals(ExamStatus.DONE)){\n                // update exam to DONE\n                exam.setStatus(ExamStatus.DONE);\n                exam.setSubmissionDate(exam.getExamDate());\n                this.examRepository.saveAndFlush(exam);\n                // BAD REQUEST\n                return new ResponseEntity\u003c\u003e(HttpStatus.FORBIDDEN);\n            }\n        }\n\n        return new ResponseEntity\u003c\u003e(HttpStatus.BAD_REQUEST);\n    }","returnType":"ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e","methodName":"handleExamProgress","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.handleExamProgress","classId":"edu.baylor.ems.service.ExamService","line":103,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"private ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e handleExamInit(Exam exam) {\n\n        // QMS get questions / choices\n        List\u003cQuestionQmsDto\u003e questionQmsDtos \u003d this.qmsService.getQuestions(exam.getConfigurationId());\n\n        exam \u003d setExamToProgress(exam);\n        exam \u003d setExamDate(exam);\n        exam.setSum(questionQmsDtos.size());\n        exam \u003d this.examRepository.saveAndFlush(exam);\n\n        // Persist to DB + Retrieve from DB + clear data\n        List\u003cQuestionEmsDto\u003e questions \u003d this.questionService.saveAllQuestionQmsDtos(questionQmsDtos, exam);\n        // Update Exam to PROGRESS \u0026 set examDATE to currentDate + 30 min\n\n\n        return new ResponseEntity\u003c\u003e(questions,HttpStatus.OK);\n    }","returnType":"ResponseEntity\u003cList\u003cQuestionEmsDto\u003e\u003e","methodName":"handleExamInit","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.handleExamInit","classId":"edu.baylor.ems.service.ExamService","line":127,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"private Exam setExamDate(Exam exam) {\n        long ONE_MINUTE_IN_MILLIS\u003d60000;\n        Calendar date \u003d Calendar.getInstance();\n        long t \u003d date.getTimeInMillis();\n        Date afterAdding\u003dnew Date(t + (30 * ONE_MINUTE_IN_MILLIS));\n        exam.setExamDate(afterAdding);\n        return exam;\n    }","returnType":"Exam","methodName":"setExamDate","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.setExamDate","classId":"edu.baylor.ems.service.ExamService","line":145,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"private Exam setExamToProgress(Exam exam) {\n        exam.setStatus(ExamStatus.PROGRESS);\n        return exam;\n    }","returnType":"Exam","methodName":"setExamToProgress","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.setExamToProgress","classId":"edu.baylor.ems.service.ExamService","line":154,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public ResponseEntity\u003cObject\u003e finishExam(Integer id) {\n        Optional\u003cExam\u003e optionalExam \u003d this.findById(id);\n        if (optionalExam.isPresent()) {\n            return new ResponseEntity\u003c\u003e(HttpStatus.NOT_FOUND);\n        }\n        Exam exam \u003d optionalExam.get();\n        Date currentDate \u003d new Date();\n        if (currentDate.before(exam.getExamDate()) || currentDate.equals(exam.getExamDate())){\n            exam.setStatus(ExamStatus.DONE);\n            exam.setSubmissionDate(currentDate);\n            List\u003cQuestion\u003e questions \u003d this.questionService.getAllByExam(exam.getId());\n            exam.setSum(questions.size());\n            Integer correct \u003d 0;\n            for (Question q: questions\n                 ) {\n                boolean same \u003d true;\n                for (Choice ch: q.getChoices()\n                     ) {\n                    if (!(ch.isCorrect() \u0026\u0026 ch.isChosen())){\n                        same \u003d false;\n                        break;\n                    }\n                }\n                if (same) {\n                    correct \u003d correct + 1;\n                }\n            }\n            exam.setCorrect(correct);\n            examRepository.saveAndFlush(exam);\n            return new ResponseEntity\u003c\u003e(HttpStatus.OK);\n        } else {\n            // BAD REQUEST\n            return new ResponseEntity\u003c\u003e(HttpStatus.FORBIDDEN);\n        }\n\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"finishExam","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.finishExam","classId":"edu.baylor.ems.service.ExamService","line":160,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ExamService.java","directoryName":""},"code":"public ExamReviewDto reviewExam(Integer id) {\n        Optional\u003cExam\u003e optionalExam \u003d this.findById(id);\n        if (!optionalExam.isPresent()) {\n            throw new IllegalArgumentException(\"Exam id doesn\u0027t exist!\");\n        }\n        Exam exam \u003d optionalExam.get();\n        List\u003cQuestion\u003e questions \u003d this.questionService.getAllByExam(exam.getId());\n\n        ExamReviewDto examReview \u003d new ExamReviewDto();\n        examReview.setConfigurationName(exam.getConfigurationName());\n        examReview.setExaminee(exam.getExaminee());\n        examReview.setCorrect(exam.getCorrect());\n        examReview.setSum(exam.getSum());\n        examReview.setExamDate(exam.getExamDate());\n        examReview.setQuestions(questions);\n        examReview.setExamDateFrom(exam.getExamDateFrom());\n        examReview.setExamDateTo(exam.getExamDateTo());\n\n        return examReview;\n    }","returnType":"ExamReviewDto","methodName":"reviewExam","className":"ExamService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ExamService.reviewExam","classId":"edu.baylor.ems.service.ExamService","line":197,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/EmailService.java","directoryName":""},"code":"public void sendExamStartDateReminder(Exam exam) {\n        String subject \u003d \"Texas Teacher Training exam start date reminder\";\n        DateFormat dateFormat \u003d new SimpleDateFormat(\"MMMM d, yyyy\");\n        String emailContent \u003d String.format(EXAM_START_DATE_REMINDER_TEMPLATE, exam.getConfigurationName(), dateFormat.format(exam.getExamDateFrom()));\n        try {\n            sendEmail(subject,exam.getExaminee(), emailContent);\n        } catch (MessagingException e) {\n            // change later to custom exception\n            e.printStackTrace();\n        }\n    }","returnType":"void","methodName":"sendExamStartDateReminder","className":"EmailService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.EmailService.sendExamStartDateReminder","classId":"edu.baylor.ems.service.EmailService","line":25,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/EmailService.java","directoryName":""},"code":"public void sendExamEndDateReminder(Exam exam) {\n        String subject \u003d \"Texas Teacher Training exam end date reminder\";\n        DateFormat dateFormat \u003d new SimpleDateFormat(\"MMMM d, yyyy\");\n        String emailContent \u003d String.format(EXAM_END_DATE_REMINDER_TEMPLATE, dateFormat.format(exam.getExamDateTo()),  exam.getConfigurationName());\n        try {\n            sendEmail(subject,exam.getExaminee(), emailContent);\n        } catch (MessagingException e) {\n            // change later to custom exception\n            e.printStackTrace();\n        }\n    }","returnType":"void","methodName":"sendExamEndDateReminder","className":"EmailService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.EmailService.sendExamEndDateReminder","classId":"edu.baylor.ems.service.EmailService","line":37,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/EmailService.java","directoryName":""},"code":"public void sendExamAssignmentNotification(Exam exam) {\n        String subject \u003d \"Texas Teacher Training exam assignment\";\n        DateFormat dateFormat \u003d new SimpleDateFormat(\"MMMM d, yyyy\");\n        String emailContent \u003d String.format(EXAM_ASSIGNED_NOTIFICATION_TEMPLATE, exam.getConfigurationName(), dateFormat.format(exam.getExamDateFrom()), dateFormat.format(exam.getExamDateTo()) );\n        try {\n            sendEmail(subject,exam.getExaminee(), emailContent);\n        } catch (MessagingException e) {\n            // change later to custom exception\n            e.printStackTrace();\n        }\n    }","returnType":"void","methodName":"sendExamAssignmentNotification","className":"EmailService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.EmailService.sendExamAssignmentNotification","classId":"edu.baylor.ems.service.EmailService","line":49,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/EmailService.java","directoryName":""},"code":"private void sendEmail(String subject, String sendTo, String emailContent) throws MessagingException {\n\n        MimeMessage message \u003d javaMailSender.createMimeMessage();\n        MimeMessageHelper helper \u003d new MimeMessageHelper(message, \"utf-8\");\n\n        helper.setText(emailContent, true);\n        helper.setFrom(SEND_EMAIL_FROM);\n        helper.setTo(sendTo);\n        helper.setSubject(subject);\n\n        javaMailSender.send(message);\n\n    }","returnType":"void","methodName":"sendEmail","className":"EmailService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.EmailService.sendEmail","classId":"edu.baylor.ems.service.EmailService","line":61,"msArgumentList":[{"returnType":"String"},{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/ChoiceService.java","directoryName":""},"code":"public List\u003cChoice\u003e selectChoices(SelectedChoiceEmsDto selectedChoiceEmsDto) {\n        // Find choices by question id\n        List\u003cChoice\u003e choices \u003d this.choiceRepository.findByQuestionId(selectedChoiceEmsDto.getQuestionId());\n        //Select choices and unselect choices\n        for (Choice ch: choices) {\n            for (ChoiceEmsDto chEms: selectedChoiceEmsDto.getChoiceEmsDtos()\n                 ) {\n                if (ch.getId().equals(chEms.getId())){\n                    ch.setChosen(chEms.isChosen());\n                }\n            }\n        }\n\n        choices \u003d this.choiceRepository.saveAll(choices);\n\n        List\u003cQuestion\u003e questions \u003d questionRepository.getAllByExam_Id(selectedChoiceEmsDto.getExamId());\n\n        Integer correct \u003d 0;\n\n        for (Question q: questions) {\n\n            boolean isQuestionCorrect \u003d true;\n            for (Choice ch: q.getChoices()\n                 ) {\n                if ( (ch.isCorrect() \u0026\u0026 !ch.isChosen()) || (!ch.isCorrect() \u0026\u0026 ch.isChosen()) ){\n                    isQuestionCorrect \u003d false;\n                }\n            }\n            if (isQuestionCorrect){\n                correct \u003d correct + 1;\n            }\n            if (q.getId().equals(selectedChoiceEmsDto.getQuestionId())) {\n                if (selectedChoiceEmsDto.getTextAnswer()!\u003dnull){\n                    q.setTextAnswer(selectedChoiceEmsDto.getTextAnswer());\n                }\n                q.setFlagged(selectedChoiceEmsDto.isFlagged());\n            }\n        }\n\n        questionRepository.saveAll(questions);\n\n        Exam exam \u003d examRepository.getOne(selectedChoiceEmsDto.getExamId());\n        exam.setCorrect(correct);\n        examRepository.saveAndFlush(exam);\n\n        //save\n        return choices;\n    }","returnType":"List\u003cChoice\u003e","methodName":"selectChoices","className":"ChoiceService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.ChoiceService.selectChoices","classId":"edu.baylor.ems.service.ChoiceService","line":30,"msArgumentList":[{"returnType":"SelectedChoiceEmsDto"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QmsService.java","directoryName":""},"code":"public List\u003cQuestionQmsDto\u003e getQuestions(Integer configurationId) {\n        ResponseEntity\u003cList\u003cQuestionQmsDto\u003e\u003e qqd \u003d restTemplate.exchange(\"http://qms:12345/qms/test?configId\u003d\"+configurationId, HttpMethod.GET, null, new ParameterizedTypeReference\u003cList\u003cQuestionQmsDto\u003e\u003e() {\n        });\n//        List\u003cQuestionQmsDto\u003e qqd \u003d new ArrayList\u003c\u003e();\n//        Arrays.stream(objects.getBody()).forEach(o -\u003e {\n//            qqd.add((QuestionQmsDto) o);\n//        });\n        return qqd.getBody();\n\n//        List\u003cQuestionQmsDto\u003e questionDtos \u003d new ArrayList\u003c\u003e();\n//        questionDtos.add(new QuestionQmsDto());\n//        return questionDtos;\n    }","returnType":"List\u003cQuestionQmsDto\u003e","methodName":"getQuestions","className":"QmsService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QmsService.getQuestions","classId":"edu.baylor.ems.service.QmsService","line":36,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QmsService.java","directoryName":""},"code":"public String getConfigName(Long configId) {\n        ResponseEntity\u003cConfiguration\u003e qqd \u003d restTemplate.exchange(\"http://qms:12345/qms/configuration/\"+configId, HttpMethod.GET, null, new ParameterizedTypeReference\u003cConfiguration\u003e() {\n        });\n        return qqd.getBody().getName();\n    }","returnType":"String","methodName":"getConfigName","className":"QmsService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QmsService.getConfigName","classId":"edu.baylor.ems.service.QmsService","line":51,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"public List\u003cQuestion\u003e getAllByExam(Integer examId) {\n        return this.questionRepository.getAllByExam_Id(examId);\n    }","returnType":"List\u003cQuestion\u003e","methodName":"getAllByExam","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.getAllByExam","classId":"edu.baylor.ems.service.QuestionService","line":28,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"public List\u003cQuestionEmsDto\u003e saveAllQuestionQmsDtos(List\u003cQuestionQmsDto\u003e questionQmsDtos, Exam exam) {\n\n        //QuestionQmsDto -\u003e Question\n        this.questionsFromQmsToModel(questionQmsDtos, exam);\n\n        // Save Questions\n        List\u003cQuestion\u003e questions \u003d this.questionRepository.getAllByExam_Id(exam.getId());\n        for (Question q: questions\n             ) {\n            q.setChoices(choiceRepository.findByQuestionId(q.getId()));\n        }\n\n        // Questions -\u003e QuestionEmsDto\n        List\u003cQuestionEmsDto\u003e questionEmsDtos \u003d this.questionsFromModelToEms(questions);\n\n        return questionEmsDtos;\n    }","returnType":"List\u003cQuestionEmsDto\u003e","methodName":"saveAllQuestionQmsDtos","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.saveAllQuestionQmsDtos","classId":"edu.baylor.ems.service.QuestionService","line":32,"msArgumentList":[{"returnType":"List\u003cQuestionQmsDto\u003e"},{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"public List\u003cQuestionEmsDto\u003e getAllByExamPruned(Exam exam) {\n        List\u003cQuestion\u003e questions \u003d this.questionRepository.getAllByExam_Id(exam.getId());\n        return questionsFromModelToEms(questions);\n    }","returnType":"List\u003cQuestionEmsDto\u003e","methodName":"getAllByExamPruned","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.getAllByExamPruned","classId":"edu.baylor.ems.service.QuestionService","line":50,"msArgumentList":[{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"public List\u003cQuestionEmsDto\u003e questionsFromModelToEms(List\u003cQuestion\u003e questions){\n        List\u003cQuestionEmsDto\u003e questionEmsDtos \u003d new ArrayList\u003c\u003e();\n        for (Question q: questions) {\n            QuestionEmsDto questionEmsDto \u003d new QuestionEmsDto();\n            questionEmsDto.setId(q.getId());\n            questionEmsDto.setBody(q.getBody());\n            questionEmsDto.setCode(q.getCode());\n            questionEmsDto.setFlagged(q.isFlagged());\n            questionEmsDto.setQuestionType(q.getQuestionType().toString());\n            List\u003cChoiceEmsDto\u003e choiceEmsDtos \u003d choicesFromModelToEms(q.getChoices());\n            questionEmsDto.setChoices(choiceEmsDtos);\n            questionEmsDtos.add(questionEmsDto);\n        }\n        return questionEmsDtos;\n    }","returnType":"List\u003cQuestionEmsDto\u003e","methodName":"questionsFromModelToEms","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.questionsFromModelToEms","classId":"edu.baylor.ems.service.QuestionService","line":56,"msArgumentList":[{"returnType":"List\u003cQuestion\u003e"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"private List\u003cChoiceEmsDto\u003e choicesFromModelToEms(List\u003cChoice\u003e choices) {\n        //Erase correct\n        List\u003cChoiceEmsDto\u003e choiceEmsDtos \u003d new ArrayList\u003c\u003e();\n        for (Choice ch: choices) {\n            ChoiceEmsDto choiceEmsDto \u003d new ChoiceEmsDto(ch);\n            choiceEmsDtos.add(choiceEmsDto);\n        }\n        return choiceEmsDtos;\n    }","returnType":"List\u003cChoiceEmsDto\u003e","methodName":"choicesFromModelToEms","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.choicesFromModelToEms","classId":"edu.baylor.ems.service.QuestionService","line":72,"msArgumentList":[{"returnType":"List\u003cChoice\u003e"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"public List\u003cQuestion\u003e questionsFromQmsToModel(List\u003cQuestionQmsDto\u003e questionQmsDtos, Exam exam){\n        List\u003cQuestion\u003e questions \u003d new ArrayList\u003c\u003e();\n        for (QuestionQmsDto q: questionQmsDtos\n        ) {\n            Question question \u003d new Question();\n            question.setBody(q.getBody());\n            question.setCode(q.getCode() !\u003d null ? q.getCode().getBody() : \"\");\n            question.setExam(exam);\n            question.setQuestionType(QuestionTypeEnum.valueOf(q.getQuestionType()));\n            question \u003d this.questionRepository.save(question);\n            Set\u003cChoice\u003e choices \u003d choicesFromQmsToModel(q.getChoices(), question);\n            //choiceRepository.saveAll(choices);\n            for (Choice c : choices) {\n                c.setId(null);\n                choiceRepository.save(c);\n            }\n            //question.setChoices(choices);\n            //questions.add(question);\n        }\n        return questions;\n    }","returnType":"List\u003cQuestion\u003e","methodName":"questionsFromQmsToModel","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.questionsFromQmsToModel","classId":"edu.baylor.ems.service.QuestionService","line":82,"msArgumentList":[{"returnType":"List\u003cQuestionQmsDto\u003e"},{"returnType":"Exam"}],"msAnnotations":[]},{"msId":{"path":"/ems/src/main/java/edu/baylor/ems/service/QuestionService.java","directoryName":""},"code":"private Set\u003cChoice\u003e choicesFromQmsToModel(List\u003cChoiceQmsDto\u003e choiceQmsDtos, Question question) {\n        Set\u003cChoice\u003e choices \u003d new HashSet\u003c\u003e();\n        for (ChoiceQmsDto ch: choiceQmsDtos\n             ) {\n            Choice choice \u003d new Choice();\n            choice.setId(ch.getId());\n            choice.setCorrect(ch.isCorrect());\n            choice.setBody(ch.getBody());\n            choice.setQuestion(question);\n            choices.add(choice);\n        }\n        return choices;\n    }","returnType":"Set\u003cChoice\u003e","methodName":"choicesFromQmsToModel","className":"QuestionService","packageName":"edu.baylor.ems.service","methodId":"edu.baylor.ems.service.QuestionService.choicesFromQmsToModel","classId":"edu.baylor.ems.service.QuestionService","line":104,"msArgumentList":[{"returnType":"List\u003cChoiceQmsDto\u003e"},{"returnType":"Question"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/users\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cList\u003cUser\u003e\u003e getAllUsers() {\n        return ResponseEntity.ok(userAccessService.getUsers());\n    }","returnType":"ResponseEntity\u003cList\u003cUser\u003e\u003e","methodName":"getAllUsers","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getAllUsers","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":36,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/users\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/usernames\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cList\u003cString\u003e\u003e getAllUsernames() {\n        return ResponseEntity.ok(userAccessService.getUsers()\n                .stream()\n                .map(User::getUsername)\n                .collect(Collectors.toList()));\n    }","returnType":"ResponseEntity\u003cList\u003cString\u003e\u003e","methodName":"getAllUsernames","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getAllUsernames","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":43,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/usernames\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/usernamesLike\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cList\u003cString\u003e\u003e getUsernamesLike(@RequestParam String username) {\n        return ResponseEntity.ok(userAccessService.getUsersLikeName(username)\n                .stream()\n                .map(User::getUsername)\n                .filter(x -\u003e !x.contains(\"service-account\"))\n                .collect(Collectors.toList()));\n    }","returnType":"ResponseEntity\u003cList\u003cString\u003e\u003e","methodName":"getUsernamesLike","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getUsernamesLike","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":53,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/usernamesLike\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/userRoles/{username}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cList\u003cString\u003e\u003e getUserRoles(@PathVariable String username) {\n        return ResponseEntity.ok(userAccessService.getUserRoleNames(username));\n    }","returnType":"ResponseEntity\u003cList\u003cString\u003e\u003e","methodName":"getUserRoles","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getUserRoles","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":64,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/userRoles/{username}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/validId/{id}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cBoolean\u003e isValidId(@PathVariable String id) {\n        return ResponseEntity.ok(userAccessService.getUsers()\n                .stream()\n                .anyMatch(x -\u003e x.getId().equals(id)));\n    }","returnType":"ResponseEntity\u003cBoolean\u003e","methodName":"isValidId","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.isValidId","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":71,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/validId/{id}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/emailInUse/{email}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cString\u003e isEmailInUse(@PathVariable String email) {\n        List\u003cUser\u003e users \u003d userAccessService.getUsers();\n        return ResponseEntity.ok(users\n                .stream()\n                .filter(x -\u003e email.equals(x.getEmail()))\n                .findFirst().orElse(new User()).getId());\n    }","returnType":"ResponseEntity\u003cString\u003e","methodName":"isEmailInUse","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.isEmailInUse","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":80,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/emailInUse/{email}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/userById/{id}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cUser\u003e getUserById(@PathVariable String id) {\n        List\u003cUser\u003e users \u003d userAccessService.getUsers();\n        return ResponseEntity.ok(users\n                .stream()\n                .filter(x -\u003e id.equals(x.getId()))\n                .findFirst().orElse(null));\n    }","returnType":"ResponseEntity\u003cUser\u003e","methodName":"getUserById","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getUserById","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":91,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/userById/{id}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/userByUsername/{username}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cUser\u003e getUserByUsername(@PathVariable String username) {\n        List\u003cUser\u003e users \u003d userAccessService.getUsers();\n        return ResponseEntity.ok(users\n                .stream()\n                .filter(x -\u003e username.equals(x.getUsername()))\n                .findFirst().orElse(null));\n    }","returnType":"ResponseEntity\u003cUser\u003e","methodName":"getUserByUsername","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getUserByUsername","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":102,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/userByUsername/{username}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(path \u003d \"/userIdByUsername/{username}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cString\u003e getIdByUsername(@PathVariable String username) {\n        List\u003cUser\u003e users \u003d userAccessService.getUsers();\n        return ResponseEntity.ok(users\n                .stream()\n                .filter(x -\u003e username.equals(x.getUsername()))\n                .findFirst().orElse(new User()).getId());\n    }","returnType":"ResponseEntity\u003cString\u003e","methodName":"getIdByUsername","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.getIdByUsername","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":113,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"GetMapping","key":"path","value":"\"/userIdByUsername/{username}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(path \u003d \"/addUser\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cUser\u003e addNewUser(@RequestBody User user) {\n        return ResponseEntity.ok(userAccessService.addNewUser(user));\n    }","returnType":"ResponseEntity\u003cUser\u003e","methodName":"addNewUser","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.addNewUser","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":124,"msArgumentList":[{"returnType":"User"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PostMapping","key":"path","value":"\"/addUser\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(path \u003d \"/addUsers\", consumes \u003d \"application/json\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003c?\u003e addNewUsers(@RequestBody User[] users) {\n        return userAccessService.addNewUsers(users);\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"addNewUsers","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.addNewUsers","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":131,"msArgumentList":[{"returnType":"User[]"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PostMapping","key":"consumes","value":"\"application/json\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(path \u003d \"/addUserRoles/{username}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cList\u003cRole\u003e\u003e addUserRoles(@PathVariable String username, @RequestBody Role[] roles) {\n        return ResponseEntity.ok(userAccessService.addUserRoles(username, roles));\n    }","returnType":"ResponseEntity\u003cList\u003cRole\u003e\u003e","methodName":"addUserRoles","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.addUserRoles","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":138,"msArgumentList":[{"returnType":"String"},{"returnType":"Role[]"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PostMapping","key":"path","value":"\"/addUserRoles/{username}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(path \u003d \"/updateUser\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cString\u003e updateUser(@RequestBody User user) {\n        SecurityContext context \u003d SecurityContextHolder.getContext();\n        Authentication auth \u003d context.getAuthentication();\n        KeycloakPrincipal principal \u003d (KeycloakPrincipal) auth.getPrincipal();\n\n        if (user.getUsername().equals(principal.getName())\n                || auth.getAuthorities()\n                    .stream()\n                    .anyMatch(x -\u003e x.getAuthority().equals(\"ROLE_admin\")\n                        || (x.getAuthority().equals(\"ROLE_superadmin\")))) {\n            userAccessService.updateUser(user);\n            return ResponseEntity.noContent().build();\n        }\n\n        return ResponseEntity.status(403).body(\"Forbidden\");\n    }","returnType":"ResponseEntity\u003cString\u003e","methodName":"updateUser","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.updateUser","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":145,"msArgumentList":[{"returnType":"User"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PutMapping","key":"path","value":"\"/updateUser\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(path \u003d \"/changePassword/{id}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_user\u0027, \u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cString\u003e changePassword(@PathVariable String id, @RequestBody String newPassword) {\n        SecurityContext context \u003d SecurityContextHolder.getContext();\n        Authentication auth \u003d context.getAuthentication();\n        KeycloakPrincipal principal \u003d (KeycloakPrincipal) auth.getPrincipal();\n\n        User user \u003d userAccessService.getUsers()\n                .stream()\n                .filter(x -\u003e x.getUsername().equals(principal.getName()))\n                .findFirst().orElse(null);\n\n        if (user \u003d\u003d null) {\n            return ResponseEntity.status(404).body(\"No such user\");\n        }\n\n        if (newPassword.length() \u003c 6) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Password must be at least 6 characters\");\n        }\n\n        if (user.getId().equals(id)\n                || auth.getAuthorities()\n                .stream()\n                .anyMatch(x -\u003e x.getAuthority().equals(\"ROLE_admin\")\n                        || (x.getAuthority().equals(\"ROLE_superadmin\")))) {\n            userAccessService.changeUserPassword(id, newPassword);\n            return ResponseEntity.ok(\"Password changed successfully!\");\n        }\n\n        return ResponseEntity.status(403).body(\"Forbidden\");\n    }","returnType":"ResponseEntity\u003cString\u003e","methodName":"changePassword","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.changePassword","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":165,"msArgumentList":[{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PutMapping","key":"path","value":"\"/changePassword/{id}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(path \u003d \"/deleteUser/{id}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cString\u003e removeUser(@PathVariable String id) {\n        if (userAccessService.getUsers().stream().noneMatch(x -\u003e id.equals(x.getId()))) {\n            return ResponseEntity.status(404).body(\"No user with that id\");\n        }\n        userAccessService.removeUser(id);\n        return ResponseEntity.noContent().build();\n    }","returnType":"ResponseEntity\u003cString\u003e","methodName":"removeUser","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.removeUser","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":198,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"DeleteMapping","key":"path","value":"\"/deleteUser/{id}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/controller/UserInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(path \u003d \"/deleteUserByUsername/{username}\")\n    @PreAuthorize(\"hasAnyAuthority(\u0027ROLE_admin\u0027, \u0027ROLE_superadmin\u0027)\")\n    public ResponseEntity\u003cString\u003e removeUserByUsername(@PathVariable String username) {\n        String id \u003d userAccessService.getUsers()\n                .stream()\n                .filter(x -\u003e username.equals(x.getUsername()))\n                .findFirst().orElse(new User()).getId();\n        if (id \u003d\u003d null) {\n            return ResponseEntity.notFound().build();\n        }\n        userAccessService.removeUser(id);\n        return ResponseEntity.noContent().build();\n    }","returnType":"ResponseEntity\u003cString\u003e","methodName":"removeUserByUsername","className":"UserInfoController","packageName":"edu.baylor.ecs.seer.usermanagement.controller","methodId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController.removeUserByUsername","classId":"edu.baylor.ecs.seer.usermanagement.controller.UserInfoController","line":209,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"DeleteMapping","key":"path","value":"\"/deleteUserByUsername/{username}\""},{"isHttpAnnotation":false,"annotationName":"PreAuthorize"}]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public List\u003cUser\u003e getUsers() {\n        ResponseEntity\u003cUser[]\u003e response \u003d restTemplate.getForEntity(keycloakUsersEndpoint, User[].class);\n        if (response.getBody() \u003d\u003d null) {\n            return null;\n        }\n        return Arrays.asList(response.getBody());\n    }","returnType":"List\u003cUser\u003e","methodName":"getUsers","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.getUsers","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":45,"msArgumentList":[],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public User checkExactUsernameExists(String username) {\n        List\u003cUser\u003e userList \u003d  searchUsersWithQueryParam(\"username\", username);\n        User exists \u003d null;\n        for( User user: userList) {\n            if( username.equals(user.getUsername())) {\n                exists \u003d user;\n                break;\n            }\n        }\n        return exists;\n    }","returnType":"User","methodName":"checkExactUsernameExists","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.checkExactUsernameExists","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":53,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public User checkExactEmailExists(String email) {\n        List\u003cUser\u003e userList \u003d  searchUsersWithQueryParam(\"email\", email);\n        User exists \u003d null;\n        for( User user: userList) {\n            if( email.equals(user.getEmail())) {\n                exists \u003d user;\n                break;\n            }\n        }\n        return exists;\n    }","returnType":"User","methodName":"checkExactEmailExists","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.checkExactEmailExists","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":65,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public List\u003cUser\u003e getUsersLikeName(String name) {\n        return searchUsersWithQueryParam(\"username\", name);\n    }","returnType":"List\u003cUser\u003e","methodName":"getUsersLikeName","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.getUsersLikeName","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":77,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public List\u003cUser\u003e searchUsersWithQueryParam(String paramName, String paramValue)\n    {\n        HttpHeaders headers \u003d new HttpHeaders();\n        headers.set(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n\n        UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(keycloakUsersEndpoint)\n                .queryParam(paramName, paramValue);\n\n        HttpEntity\u003c?\u003e entity \u003d new HttpEntity\u003c\u003e(headers);\n\n        HttpEntity\u003cUser[]\u003e response \u003d restTemplate.exchange(\n                builder.toUriString(),\n                HttpMethod.GET,\n                entity,\n                User[].class\n        );\n\n        if (response.getBody() \u003d\u003d null) {\n            return null;\n        }\n        return Arrays.asList(response.getBody());\n    }","returnType":"List\u003cUser\u003e","methodName":"searchUsersWithQueryParam","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.searchUsersWithQueryParam","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":81,"msArgumentList":[{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public void sendEmailWithRequiredActions( String userId, List\u003cString\u003e actions ,String redirectURI, int lifespan) {\n        restTemplate.put(keycloakUsersEndpoint + \"/\" + userId + \"/execute-actions-email\", actions);\n    }","returnType":"void","methodName":"sendEmailWithRequiredActions","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.sendEmailWithRequiredActions","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":104,"msArgumentList":[{"returnType":"String"},{"returnType":"List\u003cString\u003e"},{"returnType":"String"},{"returnType":"int"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public User addNewUser(User user) {\n        ResponseEntity\u003cUser\u003e response \u003d restTemplate.postForEntity(keycloakUsersEndpoint, user, User.class);\n        return response.getBody();\n    }","returnType":"User","methodName":"addNewUser","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.addNewUser","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":108,"msArgumentList":[{"returnType":"User"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public ResponseEntity\u003c?\u003e addNewUsers(User[] users) {\n        System.out.println(\"UMS UserAccessService addNewUsers\");\n        String responseBody \u003d \"\";\n        int line \u003d 1;\n        for(User user : users) {\n            line++;\n            // setup new user. if username is empty, set email as username\n            user.setEnabled(true);\n            if( user.getUsername().isEmpty()) {\n                user.setUsername(user.getEmail());\n            }\n            System.out.println(user);\n            // check if username is already taken:\n            User usernameExists \u003d checkExactUsernameExists(user.getUsername());\n            if(usernameExists !\u003d null) {\n                responseBody +\u003d \"line \" + String.valueOf(line) + \": username \u0027\" + user.getUsername() + \"\u0027 already exists\\n\";\n                continue;\n            }\n\n            // check if email is already used:\n            User emailIsUsed \u003d checkExactEmailExists(user.getEmail());\n            if(emailIsUsed !\u003d null) {\n                responseBody +\u003d \"line \" + String.valueOf(line) + \": email \u0027\" + user.getEmail() + \"\u0027 is already used\\n\";\n                continue;\n            }\n\n            // creating password from user\u0027s information:\n//            int atIndex \u003d user.getEmail().indexOf(\u0027@\u0027);\n//            String last3email \u003d user.getEmail().substring(atIndex-3,atIndex);\n//            String password \u003d user.getFirstName().substring(0, 3) + user.getLastName().substring(0, 3) + last3email;\n            String password \u003d \"agaqilfuh1iotblhr4875bb3kk4j\"; // random string\n\n            // setting password information:\n            Credential passwordCredential \u003d new Credential(password,true);\n            List\u003cCredential\u003e credentials \u003d new ArrayList\u003c\u003e();\n            credentials.add(passwordCredential);\n            user.setCredentials(credentials);\n\n            // create user in keycloak:\n            try {\n                ResponseEntity\u003cUser\u003e userCreateResponse \u003d restTemplate.postForEntity(keycloakUsersEndpoint, user, User.class);\n            } catch (Exception e) {\n                //e.printStackTrace();\n                responseBody +\u003d \"line \" + String.valueOf(line) + \": Couldn\u0027t create user with username \u0027\" + user.getUsername() + \"\u0027. Reason: \"+ e.getMessage() +\"\\n\";\n                continue;\n            }\n\n            // get newly created user\u0027s id:\n            User isUserCreated \u003d checkExactUsernameExists(user.getUsername());\n            if( isUserCreated \u003d\u003d null) {\n                responseBody +\u003d \"line \" + String.valueOf(line) + \": Couldn\u0027t create user with username \u0027\" + user.getUsername() + \"\u0027 due to internal server error\\n\";\n                continue;\n            }\n            System.out.println(\"created user: \" + isUserCreated);\n            System.out.println(\"UMS UserAccessService addNewUsers -\u003e check all users after creating\");\n            List\u003cUser\u003e userList \u003d  getUsers();\n            for( User user1: userList) {\n                System.out.println(user1);\n            }\n\n            // send an update account email with required UPDATE_PASSWORD action:\n            List\u003cString\u003e requiredActions \u003d new ArrayList\u003c\u003e();\n            requiredActions.add(\"UPDATE_PASSWORD\");\n            // redirect_uri and lifespan (optional) parameters are not working for now. Default values are used\n            sendEmailWithRequiredActions(isUserCreated.getId(),requiredActions , \"https://tcs.ecs.baylor.edu/\", 86400);\n        }\n        if(responseBody.isEmpty()) { responseBody\u003d \"Users are created. They will receive emails to set their passwords\";}\n        return ResponseEntity.ok(responseBody);\n\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"addNewUsers","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.addNewUsers","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":113,"msArgumentList":[{"returnType":"User[]"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public void updateUser(User user) {\n        restTemplate.put(keycloakUsersEndpoint + \"/\" + user.getId(), user);\n    }","returnType":"void","methodName":"updateUser","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.updateUser","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":185,"msArgumentList":[{"returnType":"User"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public void removeUser(String id) {\n        restTemplate.delete(keycloakUsersEndpoint + \"/\" + id);\n    }","returnType":"void","methodName":"removeUser","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.removeUser","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":189,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public void changeUserPassword(String id, String newPassword) {\n        Map\u003cString, Object\u003e request \u003d new HashMap\u003c\u003e();\n        request.put(\"type\", \"password\");\n        request.put(\"temporary\", false);\n        request.put(\"value\", newPassword);\n        restTemplate.put(keycloakUsersEndpoint + \"/\" + id + \"/reset-password\", request);\n    }","returnType":"void","methodName":"changeUserPassword","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.changeUserPassword","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":193,"msArgumentList":[{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public List\u003cString\u003e getUserRoleNames(String username) {\n        String id \u003d getUsers()\n                .stream()\n                .filter(x -\u003e x.getUsername().equals(username))\n                .findFirst().orElse(new User()).getId();\n        ResponseEntity\u003cRole[]\u003e roles \u003d restTemplate\n                .getForEntity(keycloakUsersEndpoint + \"/\" + id + \"/role-mappings/realm\",\n                        Role[].class);\n        if (roles.getBody() \u003d\u003d null) {\n            return null;\n        }\n        return Arrays.asList(roles.getBody()).stream().map(Role::getName).collect(Collectors.toList());\n    }","returnType":"List\u003cString\u003e","methodName":"getUserRoleNames","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.getUserRoleNames","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":201,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/ums/src/main/java/edu/baylor/ecs/seer/usermanagement/service/UserAccessService.java","directoryName":""},"code":"public List\u003cRole\u003e addUserRoles(String username, Role[] roles) {\n        Keycloak keycloak \u003d KeycloakBuilder.builder() //\n                .serverUrl(keycloakBaseURL) //\n                .realm(keycloakRealm) //\n                .grantType(OAuth2Constants.CLIENT_CREDENTIALS) //\n                .clientId(keycloakClient) //\n                .clientSecret(keycloakClientSecret)\n                .build();\n        RealmResource realmResource \u003d keycloak.realm(keycloakRealm);\n        UsersResource usersResource \u003d realmResource.users();\n        UserResource userResource \u003d usersResource.get(usersResource\n                .list()\n                .stream()\n                .filter(x -\u003e x.getUsername().equals(username))\n                .findFirst().orElse(new UserRepresentation()).getId());\n        if (userResource \u003d\u003d null) {\n            return null;\n        }\n        List\u003cRole\u003e rolesAdded \u003d new ArrayList\u003c\u003e();\n        for (RoleRepresentation roleRepresentation : userResource.roles().realmLevel().listAvailable()) {\n            for (Role role : roles) {\n                if (role.getName().equals(roleRepresentation.getName())) {\n                    userResource.roles().realmLevel().add(Arrays.asList(roleRepresentation));\n                    rolesAdded.add(role);\n                }\n            }\n        }\n        return rolesAdded;\n    }","returnType":"List\u003cRole\u003e","methodName":"addUserRoles","className":"UserAccessService","packageName":"edu.baylor.ecs.seer.usermanagement.service","methodId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService.addUserRoles","classId":"edu.baylor.ecs.seer.usermanagement.service.UserAccessService","line":215,"msArgumentList":[{"returnType":"String"},{"returnType":"Role[]"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"/create\")\n    public ResponseEntity\u003cObject\u003e createExam(@RequestBody ExamDto object) {\n        return emsService.createExam(object);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"createExam","className":"ExamController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ExamController.createExam","classId":"edu.baylor.ecs.cms.controller.ExamController","line":20,"msArgumentList":[{"returnType":"ExamDto"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ExamController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/{email}\")\n    public ResponseEntity\u003cEmailDto\u003e isEmailValid(@PathVariable String email, @RequestHeader(\"Authorization\") String authorication) {\n        return umsService.isEmailValid(email, authorication);\n    }","returnType":"ResponseEntity\u003cEmailDto\u003e","methodName":"isEmailValid","className":"ExamController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ExamController.isEmailValid","classId":"edu.baylor.ecs.cms.controller.ExamController","line":26,"msArgumentList":[{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/CategoryInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @RequestMapping(\"\")\n    public ResponseEntity\u003cObject[]\u003e getCategoryInfo() {\n        return qmsService.getCategoryInfoDtos();\n    }","returnType":"ResponseEntity\u003cObject[]\u003e","methodName":"getCategoryInfo","className":"CategoryInfoController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.CategoryInfoController.getCategoryInfo","classId":"edu.baylor.ecs.cms.controller.CategoryInfoController","line":17,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"RequestMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"\")\n    public ResponseEntity\u003cObject\u003e createConfiguration(@RequestBody Object object) {\n        return qmsService.createConfiguration(object);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"createConfiguration","className":"ConfigurationController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ConfigurationController.createConfiguration","classId":"edu.baylor.ecs.cms.controller.ConfigurationController","line":16,"msArgumentList":[{"returnType":"Object"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(\"/{configurationId}\")\n    public ResponseEntity\u003c?\u003e updateConfiguration(@PathVariable Long configurationId, @RequestBody Object object) {\n        return qmsService.updateConfiguration(configurationId, object);\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"updateConfiguration","className":"ConfigurationController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ConfigurationController.updateConfiguration","classId":"edu.baylor.ecs.cms.controller.ConfigurationController","line":22,"msArgumentList":[{"returnType":"Long"},{"returnType":"Object"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PutMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"\")\n    public ResponseEntity\u003cObject[]\u003e getConfigurations() {\n        return qmsService.getConfigurations();\n    }","returnType":"ResponseEntity\u003cObject[]\u003e","methodName":"getConfigurations","className":"ConfigurationController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ConfigurationController.getConfigurations","classId":"edu.baylor.ecs.cms.controller.ConfigurationController","line":28,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/{configurationId}\")\n    public ResponseEntity\u003cObject\u003e getConfiguration(@PathVariable Long configurationId) {\n        return qmsService.getConfiguration(configurationId);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"getConfiguration","className":"ConfigurationController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ConfigurationController.getConfiguration","classId":"edu.baylor.ecs.cms.controller.ConfigurationController","line":34,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"/{configurationId}\")\n    public ResponseEntity\u003c?\u003e deleteConfiguration(@PathVariable Long configurationId) {\n        return qmsService.deleteConfiguration(configurationId);\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteConfiguration","className":"ConfigurationController","packageName":"edu.baylor.ecs.cms.controller","methodId":"edu.baylor.ecs.cms.controller.ConfigurationController.deleteConfiguration","classId":"edu.baylor.ecs.cms.controller.ConfigurationController","line":40,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/UmsService.java","directoryName":""},"code":"public ResponseEntity\u003cEmailDto\u003e isEmailValid(String email, String auth) {\n\n        StringBuilder stringBuilder \u003d new StringBuilder();\n        stringBuilder.append(umsIp);\n        stringBuilder.append(email);\n        stringBuilder.append(\"?email\u003d\");\n        stringBuilder.append(email.replace(\"@\", \"%40\"));\n//        Object object \u003d restTemplate.getForEntity(umsIp + this.email + email, Integer.class);\n        HttpHeaders headers \u003d new HttpHeaders();\n        headers.add(\"Authorization\", auth);\n        HttpEntity\u003cString\u003e request \u003d new HttpEntity\u003cString\u003e(headers);\n        ResponseEntity\u003cString\u003e re \u003d restTemplate.exchange(umsIp + this.email + email, HttpMethod.GET, request, String.class);\n        System.out.println(re.getBody());\n        EmailDto emailDto \u003d new EmailDto();\n        emailDto.setEmail(re.getBody());\n        return ResponseEntity.ok(emailDto);\n//\n//        restTemplate.exchange\n//                (uri, HttpMethod.POST, new HttpEntity\u003cT\u003e(createHeaders(username, password)), Integer.class);\n//        return ResponseEntity.ok(object);\n    }","returnType":"ResponseEntity\u003cEmailDto\u003e","methodName":"isEmailValid","className":"UmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.UmsService.isEmailValid","classId":"edu.baylor.ecs.cms.service.UmsService","line":45,"msArgumentList":[{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/UmsService.java","directoryName":""},"code":"public HttpHeaders createHeaders(String username, String password) {\n        return new HttpHeaders() {{\n            String auth \u003d username + \":\" + password;\n            byte[] encodedAuth \u003d Base64.encodeBase64(\n                    auth.getBytes(Charset.forName(\"US-ASCII\")));\n            String authHeader \u003d \"Basic \" + new String(encodedAuth);\n            set(\"Authorization\", authHeader);\n        }};\n    }","returnType":"HttpHeaders","methodName":"createHeaders","className":"UmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.UmsService.createHeaders","classId":"edu.baylor.ecs.cms.service.UmsService","line":67,"msArgumentList":[{"returnType":"String"},{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/UmsService.java","directoryName":""},"code":"public Boolean isExamineeIdValid(Integer id){\n//        StringBuilder stringBuilder \u003d new StringBuilder();\n//        stringBuilder.append(umsIp);\n//        stringBuilder.append(id);\n//        stringBuilder.append(\"?id\u003d\");\n//        stringBuilder.append(id);\n//        return restTemplate.getForEntity(umsIp + validContext, Integer.class);\n        return Boolean.TRUE;\n    }","returnType":"Boolean","methodName":"isExamineeIdValid","className":"UmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.UmsService.isExamineeIdValid","classId":"edu.baylor.ecs.cms.service.UmsService","line":78,"msArgumentList":[{"returnType":"Integer"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/UmsService.java","directoryName":""},"code":"public Integer getCurrentLoggedInUser(){\n        return 1;\n    }","returnType":"Integer","methodName":"getCurrentLoggedInUser","className":"UmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.UmsService.getCurrentLoggedInUser","classId":"edu.baylor.ecs.cms.service.UmsService","line":89,"msArgumentList":[],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/QmsService.java","directoryName":""},"code":"public ResponseEntity\u003cObject[]\u003e getCategoryInfoDtos(){\n        String categoryInfoPath \u003d qmsIp + categoryInfoContext;\n        return restTemplate.getForEntity(categoryInfoPath, Object[].class);\n    }","returnType":"ResponseEntity\u003cObject[]\u003e","methodName":"getCategoryInfoDtos","className":"QmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.QmsService.getCategoryInfoDtos","classId":"edu.baylor.ecs.cms.service.QmsService","line":36,"msArgumentList":[],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/QmsService.java","directoryName":""},"code":"public ResponseEntity\u003cObject\u003e createConfiguration(Object object) {\n        Object obj \u003d restTemplate.postForObject(qmsIp + configurationContext, object, Object.class);\n        return ResponseEntity.ok(obj);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"createConfiguration","className":"QmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.QmsService.createConfiguration","classId":"edu.baylor.ecs.cms.service.QmsService","line":41,"msArgumentList":[{"returnType":"Object"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/QmsService.java","directoryName":""},"code":"public ResponseEntity\u003cObject\u003e updateConfiguration(Long configurationId, Object object) {\n        restTemplate.put(qmsIp + configurationContext+ \"/\"+configurationId.toString(), object);\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"updateConfiguration","className":"QmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.QmsService.updateConfiguration","classId":"edu.baylor.ecs.cms.service.QmsService","line":46,"msArgumentList":[{"returnType":"Long"},{"returnType":"Object"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/QmsService.java","directoryName":""},"code":"public ResponseEntity\u003cObject[]\u003e getConfigurations() {\n        return restTemplate.getForEntity(qmsIp + configurationContext, Object[].class);\n    }","returnType":"ResponseEntity\u003cObject[]\u003e","methodName":"getConfigurations","className":"QmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.QmsService.getConfigurations","classId":"edu.baylor.ecs.cms.service.QmsService","line":51,"msArgumentList":[],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/QmsService.java","directoryName":""},"code":"public ResponseEntity\u003cObject\u003e getConfiguration(Long configurationId) {\n        return restTemplate.getForEntity(qmsIp + configurationContext + \"/\"+configurationId.toString(), Object.class);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"getConfiguration","className":"QmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.QmsService.getConfiguration","classId":"edu.baylor.ecs.cms.service.QmsService","line":55,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/QmsService.java","directoryName":""},"code":"public ResponseEntity\u003c?\u003e deleteConfiguration(Long configurationId) {\n        String url \u003d qmsIp + configurationContext + \"/{configurationId}\";\n        Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n        params.put(\"configurationId\", configurationId.toString());\n        restTemplate.delete(url, params);\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteConfiguration","className":"QmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.QmsService.deleteConfiguration","classId":"edu.baylor.ecs.cms.service.QmsService","line":59,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[]},{"msId":{"path":"/cms/src/main/java/edu/baylor/ecs/cms/service/EmsService.java","directoryName":""},"code":"public ResponseEntity\u003cObject\u003e createExam(ExamDto examDto) {\n\n//        if (!umsService.isExamineeIdValid(examDto.getExaminee())){\n//            return ResponseEntity.badRequest().body(null);\n//        }\n//        examDto.setIssuer(umsService.getCurrentLoggedInUser());\n        String uri \u003d ip + examContext;\n        Object obj \u003d this.restTemplate.postForObject(uri, examDto, ExamDto.class);\n        return ResponseEntity.ok(obj);\n    }","returnType":"ResponseEntity\u003cObject\u003e","methodName":"createExam","className":"EmsService","packageName":"edu.baylor.ecs.cms.service","methodId":"edu.baylor.ecs.cms.service.EmsService.createExam","classId":"edu.baylor.ecs.cms.service.EmsService","line":29,"msArgumentList":[{"returnType":"ExamDto"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"\")\n    public List\u003cLanguage\u003e findAllLanguages() {\n        return languageRepository.findAll();\n    }","returnType":"List\u003cLanguage\u003e","methodName":"findAllLanguages","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.findAllLanguages","classId":"baylor.csi.questionManagement.controller.LanguageController","line":40,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/{languageId}\")\n    public Language findLanguageById(@PathVariable Long languageId) {\n        return languageRepository.findById(languageId).orElse(null);\n    }","returnType":"Language","methodName":"findLanguageById","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.findLanguageById","classId":"baylor.csi.questionManagement.controller.LanguageController","line":46,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"\")\n    public Language createLanguage(@Valid @RequestBody Language language) {\n        return languageRepository.save(language);\n    }","returnType":"Language","methodName":"createLanguage","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.createLanguage","classId":"baylor.csi.questionManagement.controller.LanguageController","line":52,"msArgumentList":[{"returnType":"Language"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(\"/{languageId}\")\n    public Language updateLanguage(@PathVariable Long languageId, @Valid @RequestBody Language languageRequest) {\n        return languageRepository.findById(languageId)\n                .map(language -\u003e {\n                    language.setName(languageRequest.getName());\n                    return languageRepository.save(language);\n                }).orElseThrow(() -\u003e new ResourceNotFoundException(\"Language not found with id \" + languageId));\n    }","returnType":"Language","methodName":"updateLanguage","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.updateLanguage","classId":"baylor.csi.questionManagement.controller.LanguageController","line":58,"msArgumentList":[{"returnType":"Long"},{"returnType":"Language"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PutMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"/{languageId}\")\n    public ResponseEntity\u003c?\u003e deleteQuestion(@PathVariable Long languageId) {\n        return languageRepository.findById(languageId)\n                .map(language -\u003e {\n                    languageRepository.delete(language);\n                    return ResponseEntity.ok().build();\n                }).orElseThrow(() -\u003e new ResourceNotFoundException(\"Language not found with id \" + languageId));\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteQuestion","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.deleteQuestion","classId":"baylor.csi.questionManagement.controller.LanguageController","line":68,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"\")\n    public ResponseEntity\u003c?\u003e deleteAllLanguages() {\n        try {\n            languageRepository.deleteAll();\n        } catch (Exception e) {\n            throw new JPAException(\"Deletion of some languages violate database constraints\");\n        }\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteAllLanguages","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.deleteAllLanguages","classId":"baylor.csi.questionManagement.controller.LanguageController","line":78,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/export\")\n    public String exportAllLanguages() throws IOException {\n\n        List\u003cLanguage\u003e languageList \u003d languageRepository.findAll();\n        LanguageListDto languageListDto \u003d new LanguageListDto(languageList);\n\n        XmlMapper xmlMapper \u003d new XmlMapper();\n        xmlMapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        if( languageListDto !\u003d null)\n            return xmlMapper.writeValueAsString(languageListDto);\n\n        return \"Failed to export\";\n    }","returnType":"String","methodName":"exportAllLanguages","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.exportAllLanguages","classId":"baylor.csi.questionManagement.controller.LanguageController","line":89,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/LanguageController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(value \u003d \"/import\")\n    public ResponseEntity\u003c?\u003e uploadLanguages(@RequestParam(\"file\") MultipartFile file) throws IOException, ParserConfigurationException, SAXException {\n\n        if (file.isEmpty()) {\n            throw new ResourceNotFoundException(\"File upload failed when importing language(s)\");\n        }\n\n        Set\u003cLanguage\u003e languageList \u003d null;\n\n        byte[] bytes \u003d file.getBytes();\n        InputStream myInputStream \u003d new ByteArrayInputStream(bytes);\n        // create a new DocumentBuilderFactory\n        DocumentBuilderFactory factory \u003d DocumentBuilderFactory.newInstance();\n        // use the factory to create a document builder\n        DocumentBuilder builder \u003d factory.newDocumentBuilder();\n        // create a new document from input stream\n        Document doc \u003d builder.parse(myInputStream);\n        doc.getDocumentElement().normalize();\n        // get NodeList with \"language\" tag\n        NodeList languageNodeList \u003d doc.getElementsByTagName(\"language\");\n        if(languageNodeList.getLength() \u003d\u003d 0) {\n            throw new ParsingException(\"XML document doesn\u0027t contain tags with name language\");\n        }\n        languageList \u003d xmlParserService.parseLanguageNodeList(languageNodeList);\n\n        if( languageList !\u003d null)\n        {\n            try {\n                languageRepository.saveAll(languageList);\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new JPAException(\"Language import failed. Reason: \" + e.getMessage());\n            }\n        }\n\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"uploadLanguages","className":"LanguageController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.LanguageController.uploadLanguages","classId":"baylor.csi.questionManagement.controller.LanguageController","line":105,"msArgumentList":[{"returnType":"MultipartFile"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PostMapping","key":"value","value":"\"/import\""}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryInfoController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"\")\n    public List\u003cCategoryInfoDto\u003e findAllCategoryInfos() {\n        List\u003cCategoryInfoDto\u003e categoryInfoDtos \u003d new ArrayList\u003c\u003e();\n        List\u003cCategory\u003e categories \u003d categoryRepository.findAll();\n        for(Category category: categories) {\n            CategoryInfoDto categoryInfoDto \u003d new CategoryInfoDto(category.getId(),category.getName(),category.getDescription(),categoryRepository.getQuestionCountDtoById(category.getId()));\n            categoryInfoDtos.add(categoryInfoDto);\n        }\n\n        return categoryInfoDtos;\n    }","returnType":"List\u003cCategoryInfoDto\u003e","methodName":"findAllCategoryInfos","className":"CategoryInfoController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryInfoController.findAllCategoryInfos","classId":"baylor.csi.questionManagement.controller.CategoryInfoController","line":21,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/all\")\n    public List\u003cQuestion\u003e findAllQuestions() {\n        return questionRepository.findAll();\n    }","returnType":"List\u003cQuestion\u003e","methodName":"findAllQuestions","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.findAllQuestions","classId":"baylor.csi.questionManagement.controller.QuestionController","line":53,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/{questionId}\")\n    public Question findQuestionById(@PathVariable Long questionId) {\n        return questionRepository.findById(questionId).orElse(null);\n    }","returnType":"Question","methodName":"findQuestionById","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.findQuestionById","classId":"baylor.csi.questionManagement.controller.QuestionController","line":59,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"\")\n    public List\u003cQuestionDto\u003e findQuestionByCateogryIdAndName(@RequestParam Map\u003cString, Object\u003e customQuery) {\n\n        String name \u003d \"\";\n        if (customQuery.containsKey(\"name\")) {\n            name \u003d customQuery.get(\"name\").toString().toLowerCase();\n        }\n\n        List\u003cQuestionDto\u003e dtos \u003d new ArrayList\u003c\u003e();\n        if(customQuery.containsKey(\"categoryId\")) {\n            Long categoryId \u003d Long.parseLong(customQuery.get(\"categoryId\").toString());\n            dtos \u003d questionRepository.findByCategoryIdAndName(categoryId, \"%\" + name + \"%\");\n        } else {\n            dtos \u003d questionRepository.findQuestionDtoByName(\"%\" + name + \"%\");\n        }\n\n        for (QuestionDto dto : dtos) {\n            dto.setCategoriesNames(categoryRepository.getNamesByQuestionId(dto.getId()));\n        }\n        return dtos;\n    }","returnType":"List\u003cQuestionDto\u003e","methodName":"findQuestionByCateogryIdAndName","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.findQuestionByCateogryIdAndName","classId":"baylor.csi.questionManagement.controller.QuestionController","line":65,"msArgumentList":[{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"\")\n    public Question createQuestion(@Valid @RequestBody Map\u003cString, Object\u003e payload) {\n        try {\n            Question question \u003d new Question();\n            question.setBody((String) payload.get(\"body\"));\n            question.setLevel(Integer.parseInt(payload.get(\"level\").toString()));\n            question.setTitle((String) payload.get(\"title\"));\n            ArrayList\u003cObject\u003e categoryIds \u003d (ArrayList\u003cObject\u003e) payload.get(\"categories\");\n            for (Object id : categoryIds) {\n                Category category \u003d categoryRepository.findById(Long.parseLong(id.toString())).orElse(null);\n                if (category !\u003d null) {\n                    question.getCategories().add(category);\n                }\n            }\n            ArrayList\u003cMap\u003cString, Object\u003e\u003e choices \u003d (ArrayList\u003cMap\u003cString, Object\u003e\u003e) payload.get(\"choices\");\n            for (Map\u003cString, Object\u003e choice : choices) {\n                createNewChoiceFromJSonForQuestion(question, choice);\n            }\n            ArrayList\u003cMap\u003cString, Object\u003e\u003e codes \u003d (ArrayList\u003cMap\u003cString, Object\u003e\u003e) payload.get(\"codes\");\n            for (Map\u003cString, Object\u003e code : codes) {\n                createNewCodeFromJsonForQuestion(question, code);\n\n            }\n\n            String questionType \u003d (String) payload.get(\"type\");\n\n            if (questionType.equals(\"SELECT_ONE\")){\n                question.setQuestionType(QuestionTypeEnum.SELECT_ONE);\n            }\n            else if (questionType.equals(\"TEXT\")){\n                question.setQuestionType(QuestionTypeEnum.TEXT);\n            }\n            else{\n                question.setQuestionType(QuestionTypeEnum.SELECT_MANY);\n            }\n\n\n            return questionRepository.save(question);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new JPAException(\"Question created failed because of \" + e.getMessage());\n        }\n\n    }","returnType":"Question","methodName":"createQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.createQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":88,"msArgumentList":[{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(\"/{questionId}\")\n    public Question updateQuestion(@PathVariable Long questionId, @Valid @RequestBody Map\u003cString, Object\u003e payload) {\n        try {\n            Question question \u003d questionRepository.findById(questionId).orElse(null);\n            if (question \u003d\u003d null) {\n                throw new ResourceNotFoundException(\"Question not found with id \" + questionId);\n            }\n            question.setTitle(payload.get(\"title\").toString());\n            question.setBody(payload.get(\"body\").toString());\n            question.setLevel(Integer.parseInt(payload.get(\"level\").toString()));\n            Set\u003cChoice\u003e choicesInDB \u003d question.getChoices();\n            HashSet\u003cLong\u003e choicesInDBIds \u003d new HashSet\u003c\u003e();\n            for (Choice c : choicesInDB) {\n                choicesInDBIds.add(c.getId());\n            }\n            ArrayList\u003cMap\u003cString, Object\u003e\u003e choices \u003d (ArrayList\u003cMap\u003cString, Object\u003e\u003e) payload.get(\"choices\");\n\n            HashSet\u003cLong\u003e updatedChoicesId \u003d new HashSet\u003c\u003e();\n            for (Map\u003cString, Object\u003e choice : choices) {\n                if (choice.containsKey(\"id\")) {\n                    updatedChoicesId.add(Long.parseLong(choice.get(\"id\").toString()));\n                }\n            }\n\n            Iterator\u003cChoice\u003e it \u003d choicesInDB.iterator();\n            ArrayList\u003cChoice\u003e deleteChoices \u003d new ArrayList\u003c\u003e();\n            while (it.hasNext()) {\n                Choice c \u003d it.next();\n                if (updatedChoicesId.add(c.getId())) {\n                    deleteChoices.add(c);\n                    it.remove();\n                }\n            }\n            for(Choice c: deleteChoices) {\n                question.getChoices().remove(c);\n                choiceRepository.delete(c);\n            }\n\n            for (Map\u003cString, Object\u003e choice : choices) {\n                if (!choice.containsKey(\"id\")) {\n                    createNewChoiceFromJSonForQuestion(question, choice);\n                }\n                else if (choicesInDBIds.add(Long.parseLong(choice.get(\"id\").toString()))) {\n                    createNewChoiceFromJSonForQuestion(question, choice);\n                } else {\n                    updateChoiceFromJSonForQuestion(choicesInDB, choice);\n                }\n            }\n\n            Set\u003cCode\u003e codesInDB \u003d question.getCodes();\n            HashSet\u003cLong\u003e codesInDBIds \u003d new HashSet\u003c\u003e();\n            for (Code c : codesInDB) {\n                codesInDBIds.add(c.getId());\n            }\n            ArrayList\u003cMap\u003cString, Object\u003e\u003e codes \u003d (ArrayList\u003cMap\u003cString, Object\u003e\u003e) payload.get(\"codes\");\n\n\n            HashSet\u003cLong\u003e updatedcodesId \u003d new HashSet\u003c\u003e();\n            for (Map\u003cString, Object\u003e code : codes) {\n                if(code.containsKey(\"id\")) {\n                    updatedcodesId.add(Long.parseLong(code.get(\"id\").toString()));\n                }\n            }\n            Iterator\u003cCode\u003e iter \u003d codesInDB.iterator();\n            ArrayList\u003cCode\u003e deleteCodes \u003d new ArrayList\u003c\u003e();\n            while (iter.hasNext()) {\n                Code c \u003d iter.next();\n                if (updatedcodesId.add(c.getId())) {\n                    deleteCodes.add(c);\n                    iter.remove();\n                }\n            }\n\n            for(Code c:deleteCodes) {\n                question.getCodes().remove(c);\n                codeRepository.delete(c);\n            }\n\n\n            for (Map\u003cString, Object\u003e code : codes) {\n                if (!code.containsKey(\"id\")) {\n                    createNewCodeFromJsonForQuestion(question, code);\n                }\n                else if (codesInDBIds.add(Long.parseLong(code.get(\"id\").toString()))) {\n                    createNewCodeFromJsonForQuestion(question, code);\n                } else {\n                    updateCodeFromJsonForQuestion(codesInDB, code);\n                }\n\n            }\n\n\n            Set\u003cCategory\u003e categoriesInDB \u003d question.getCategories();\n            HashSet\u003cLong\u003e categoriesIdsInDB \u003d new HashSet\u003c\u003e();\n            ArrayList\u003cObject\u003e categoryIds \u003d (ArrayList\u003cObject\u003e) payload.get(\"categories\");\n            ArrayList\u003cLong\u003e categoryIdsLong \u003d categoryIds.stream().map(c-\u003eLong.parseLong(c.toString())).collect(Collectors.toCollection(ArrayList::new));\n\n            Iterator\u003cCategory\u003e catIter \u003d categoriesInDB.iterator();\n            ArrayList\u003cCategory\u003e deleteCategories \u003d new ArrayList\u003c\u003e();\n            while (catIter.hasNext()) {\n                Category c \u003d catIter.next();\n                if(!categoryIdsLong.contains(c.getId())){\n                    deleteCategories.add(c);\n                    catIter.remove();\n                }\n            }\n            for(Category c:deleteCategories) {\n                question.getCategories().remove(c);\n            }\n\n\n            for(Category c:categoriesInDB) {\n                categoriesIdsInDB.add(c.getId());\n            }\n\n            for(Long id:categoryIdsLong) {\n                if(categoriesIdsInDB.add(id)) {\n                    Category c \u003d categoryRepository.findById(id).orElse(null);\n                    if(c!\u003dnull){\n                        question.getCategories().add(c);\n                    }\n\n                }\n            }\n\n\n            return questionRepository.save(question);\n\n        } catch (ResourceNotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new JPAException(\"Question updating failed because of \" + e.getMessage());\n        }\n\n    }","returnType":"Question","methodName":"updateQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.updateQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":135,"msArgumentList":[{"returnType":"Long"},{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PutMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"private void createNewCodeFromJsonForQuestion(Question question, Map\u003cString, Object\u003e code) {\n        Long languageId \u003d Long.parseLong(code.get(\"languageId\").toString());\n        Language language \u003d languageRepository.findById(languageId).orElse(null);\n        if (language !\u003d null) {\n            Code c \u003d new Code();\n            c.setBody(code.get(\"body\").toString());\n            c.setLanguage(language);\n            c.setQuestion(question);\n            question.getCodes().add(c);\n        }\n    }","returnType":"void","methodName":"createNewCodeFromJsonForQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.createNewCodeFromJsonForQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":273,"msArgumentList":[{"returnType":"Question"},{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"private void updateCodeFromJsonForQuestion(Set\u003cCode\u003e codesInDB, Map\u003cString, Object\u003e code) {\n        for (Code c : codesInDB) {\n            if(c.getId()\u003d\u003dnull) {\n                continue;\n            }\n            if (c.getId().equals(Long.parseLong(code.get(\"id\").toString()))) {\n                Long languageId \u003d Long.parseLong(code.get(\"languageId\").toString());\n                Language language \u003d languageRepository.findById(languageId).orElse(null);\n                if (language !\u003d null) {\n                    c.setBody(code.get(\"body\").toString());\n                    c.setLanguage(language);\n                }\n            }\n        }\n    }","returnType":"void","methodName":"updateCodeFromJsonForQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.updateCodeFromJsonForQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":285,"msArgumentList":[{"returnType":"Set\u003cCode\u003e"},{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"private void createNewChoiceFromJSonForQuestion(Question question, Map\u003cString, Object\u003e choice) {\n        Choice c \u003d new Choice();\n        c.setBody(choice.get(\"body\").toString());\n        c.setCorrect(Boolean.parseBoolean(choice.get(\"correct\").toString()));\n        c.setQuestion(question);\n        question.getChoices().add(c);\n    }","returnType":"void","methodName":"createNewChoiceFromJSonForQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.createNewChoiceFromJSonForQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":301,"msArgumentList":[{"returnType":"Question"},{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"private void updateChoiceFromJSonForQuestion(Set\u003cChoice\u003e choicesInDB, Map\u003cString, Object\u003e choice) {\n        for (Choice c : choicesInDB) {\n            if(c.getId()\u003d\u003dnull) {\n                continue;\n            }\n            if (c.getId().equals(Long.parseLong(choice.get(\"id\").toString()))) {\n                c.setBody(choice.get(\"body\").toString());\n                c.setCorrect(Boolean.parseBoolean(choice.get(\"correct\").toString()));\n            }\n        }\n    }","returnType":"void","methodName":"updateChoiceFromJSonForQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.updateChoiceFromJSonForQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":309,"msArgumentList":[{"returnType":"Set\u003cChoice\u003e"},{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"/{questionId}\")\n    public ResponseEntity\u003c?\u003e deleteQuestion(@PathVariable Long questionId) {\n        return questionRepository.findById(questionId)\n                .map(question -\u003e {\n                    questionRepository.delete(question);\n                    return ResponseEntity.ok().build();\n                }).orElseThrow(() -\u003e new ResourceNotFoundException(\"Question not found with id \" + questionId));\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteQuestion","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.deleteQuestion","classId":"baylor.csi.questionManagement.controller.QuestionController","line":321,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"\")\n    public ResponseEntity\u003c?\u003e deleteAllQuestions() {\n        questionRepository.deleteAll();\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteAllQuestions","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.deleteAllQuestions","classId":"baylor.csi.questionManagement.controller.QuestionController","line":331,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/export\")\n    public String exportAllQuestions() throws IOException {\n\n        List\u003cQuestion\u003e questionsList \u003d questionRepository.findAll();\n        QuestionListDto questions \u003d new QuestionListDto(questionsList);\n\n        System.out.println(\"Exporting all questions \");\n        XmlMapper xmlMapper \u003d new XmlMapper();\n        xmlMapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n\n        if( questions !\u003d null)\n            return xmlMapper.writeValueAsString(questions);\n\n        return \"Failed to export\";\n    }","returnType":"String","methodName":"exportAllQuestions","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.exportAllQuestions","classId":"baylor.csi.questionManagement.controller.QuestionController","line":338,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"/exportFiltered\")\n    public String exportFilteredQuestions(@RequestParam(\"questionIdList\") List\u003cLong\u003e idList) throws IOException {\n\n        for(Long i : idList ) {\n            System.out.println(i);\n        }\n\n        List\u003cQuestion\u003e questionsList \u003d questionRepository.findAllById(idList);\n        QuestionListDto questions \u003d new QuestionListDto(questionsList);\n\n        System.out.println(\"Exporting filtered questions \");\n        XmlMapper xmlMapper \u003d new XmlMapper();\n        xmlMapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        if( questions !\u003d null)\n            return xmlMapper.writeValueAsString(questions);\n\n        return \"Failed to export\";\n    }","returnType":"String","methodName":"exportFilteredQuestions","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.exportFilteredQuestions","classId":"baylor.csi.questionManagement.controller.QuestionController","line":356,"msArgumentList":[{"returnType":"List\u003cLong\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/export/{questionId}\")\n    public String exportQuestionById(@PathVariable Long questionId) throws IOException {\n        Question question \u003d questionRepository.findById(questionId).orElse(null);\n\n        System.out.println(\"Exporting the question \" + questionId);\n        XmlMapper xmlMapper \u003d new XmlMapper();\n        xmlMapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        if( question !\u003d null)\n            return xmlMapper.writeValueAsString(question);\n\n        return \"Failed to export\";\n    }","returnType":"String","methodName":"exportQuestionById","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.exportQuestionById","classId":"baylor.csi.questionManagement.controller.QuestionController","line":377,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(value \u003d \"/import\")\n//    public ResponseEntity\u003c?\u003e uploadQuestions(@RequestParam(\"file\") MultipartFile file) throws IOException {\n    public ResponseEntity\u003c?\u003e uploadQuestions(@RequestParam(\"file\") MultipartFile file) throws IOException, ParserConfigurationException, SAXException {\n\n        if (file.isEmpty()) {\n            throw new ResourceNotFoundException(\"File upload fail when importing question(s)\");\n        }\n\n        Set\u003cQuestion\u003e questionList \u003d null;\n\n        byte[] bytes \u003d file.getBytes();\n        InputStream myInputStream \u003d new ByteArrayInputStream(bytes);\n        // create new DocumentBuilderFactory\n        DocumentBuilderFactory factory \u003d DocumentBuilderFactory.newInstance();\n        // use the factory to create a documentbuilder\n        DocumentBuilder builder \u003d factory.newDocumentBuilder();\n        // create a new document from input stream\n        Document doc \u003d builder.parse(myInputStream);\n        doc.getDocumentElement().normalize();\n        // get NodeList with \"question\" tag\n        NodeList questionNodeList \u003d doc.getElementsByTagName(\"question\");\n        if(questionNodeList.getLength() \u003d\u003d 0) {\n            throw new ParsingException(\"XML document doesn\u0027t contain tags with name question\");\n        }\n        questionList \u003d xmlParserService.parseQuestionNodeList(questionNodeList);\n\n        if( questionList !\u003d null)\n        {\n            try {\n                questionRepository.saveAll(questionList);\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new JPAException(\"Question import failed. Reason: \" + e.getMessage());\n            }\n        }\n\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"uploadQuestions","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.uploadQuestions","classId":"baylor.csi.questionManagement.controller.QuestionController","line":392,"msArgumentList":[{"returnType":"MultipartFile"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PostMapping","key":"value","value":"\"/import\""}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/QuestionController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"/checkSyntax\")\n    public String checkCodeSnippet(@Valid @RequestBody Map\u003cString, Object\u003e payload) throws ParserConfigurationException, IOException, SAXException {\n\n        String codeBody \u003d (String) payload.get(\"codeBody\");\n\n        DocumentBuilderFactory factory \u003d DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder \u003d factory.newDocumentBuilder();\n        InputSource is \u003d new InputSource(new StringReader(codeBody));\n        Document doc \u003d  builder.parse(is);\n        doc.getDocumentElement().normalize();\n        // get NodeList with \"code\" tag\n        NodeList codeNodeList \u003d doc.getElementsByTagName(\"code\");\n        if(codeNodeList.getLength() \u003e 1) {\n            throw new ParsingException(\"Code snippet body should contain only one code block\");\n        }\n        else if( codeNodeList.getLength() \u003d\u003d 1 ) {\n            codeBody \u003d codeNodeList.item(0).getTextContent();\n        }\n\n        System.out.println(\"Code body: \" + codeBody);\n//        return codeBody;\n        return javaSyntaxCheckService.check(codeBody);\n    }","returnType":"String","methodName":"checkCodeSnippet","className":"QuestionController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.QuestionController.checkCodeSnippet","classId":"baylor.csi.questionManagement.controller.QuestionController","line":432,"msArgumentList":[{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"\")\n    public List\u003cConfiguration\u003e findAllConfigurations() {\n        return configurationRepository.findAll();\n    }","returnType":"List\u003cConfiguration\u003e","methodName":"findAllConfigurations","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.findAllConfigurations","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":31,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/{configurationId}\")\n    public Configuration findConfigurationsById(@PathVariable Long configurationId) {\n        return configurationRepository.findById(configurationId).orElse(null);\n    }","returnType":"Configuration","methodName":"findConfigurationsById","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.findConfigurationsById","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":37,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"/{configurationId}\")\n    public ResponseEntity\u003c?\u003e deleteConfiguration(@PathVariable Long configurationId) {\n        return configurationRepository.findById(configurationId)\n                .map(configuration -\u003e {\n                    configurationRepository.delete(configuration);\n                    return ResponseEntity.ok().build();\n                }).orElseThrow(() -\u003e new ResourceNotFoundException(\"Configuration not found with id \" + configurationId));\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteConfiguration","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.deleteConfiguration","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":45,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"\")\n    public Configuration createConfiguration(@Valid @RequestBody Map\u003cString, Object\u003e payload) {\n        try {\n            Configuration configuration \u003d new Configuration();\n            configuration.setName((String) payload.get(\"name\"));\n            configuration.setDescription((String) payload.get(\"description\"));\n\n            List\u003cLong\u003e oldGroupIds \u003d new ArrayList\u003c\u003e();\n            ArrayList\u003cMap\u003cString, Object\u003e\u003e groups \u003d (ArrayList\u003cMap\u003cString, Object\u003e\u003e) payload.get(\"groups\");\n            for (Map\u003cString, Object\u003e group : groups) {\n                createNewGroupFromJSonForConfiguration(configuration, group, oldGroupIds);\n            }\n            return configurationRepository.save(configuration);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new JPAException(\"Question created failed because of \" + e.getMessage());\n        }\n\n    }","returnType":"Configuration","methodName":"createConfiguration","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.createConfiguration","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":55,"msArgumentList":[{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(\"/{configurationId}\")\n    public Configuration updateConfiguration(@PathVariable Long configurationId, @Valid @RequestBody Map\u003cString, Object\u003e payload) {\n        try {\n            Configuration configuration \u003d configurationRepository.findById(configurationId).orElse(null);\n            Set\u003cConfigurationGroup\u003e configurationGroups \u003d configuration.getGroups();\n            configuration.setName((String) payload.get(\"name\"));\n            configuration.setDescription((String) payload.get(\"description\"));\n            // clean groups: old groups will be added back, new groups will be added\n            Set\u003cConfigurationGroup\u003e newGroups \u003d new HashSet\u003c\u003e();\n            configuration.setGroups(newGroups);\n\n            List\u003cLong\u003e oldGroupIds \u003d new ArrayList\u003c\u003e();\n            ArrayList\u003cMap\u003cString, Object\u003e\u003e groups \u003d (ArrayList\u003cMap\u003cString, Object\u003e\u003e) payload.get(\"groups\");\n            for (Map\u003cString, Object\u003e group : groups) {\n                createNewGroupFromJSonForConfiguration(configuration, group, oldGroupIds);\n            }\n            removeDeletedGroups(configurationGroups, oldGroupIds);\n\n            return configurationRepository.save(configuration);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new JPAException(\"Question created failed because of \" + e.getMessage());\n        }\n\n    }","returnType":"Configuration","methodName":"updateConfiguration","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.updateConfiguration","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":77,"msArgumentList":[{"returnType":"Long"},{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PutMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"private void createNewGroupFromJSonForConfiguration(Configuration configuration, Map\u003cString, Object\u003e group, List\u003cLong\u003e oldGroupIds) {\n\n        if( group!\u003dnull \u0026\u0026 group.get(\"isNew\")!\u003dnull \u0026\u0026 Boolean.parseBoolean(group.get(\"isNew\").toString())) {\n            ConfigurationGroup c \u003d new ConfigurationGroup();\n            c.setCategory(Long.parseLong(group.get(\"category\").toString()));\n            c.setCount(Integer.parseInt(group.get(\"count\").toString()));\n            if (group.get(\"language\") !\u003d null) {\n                Language lang \u003d languageRepository.findByName(group.get(\"language\").toString());\n                if (lang !\u003d null) {\n                    c.setLanguageId(lang.getId());\n                }\n            } else {\n                c.setLanguageId(null);\n            }\n            c.setLevel(Integer.parseInt(group.get(\"level\").toString()));\n            c.setConfiguration(configuration);\n            configuration.getGroups().add(c);\n        }\n        else {\n            if(group!\u003dnull \u0026\u0026 group.get(\"id\")!\u003dnull) {\n                Long groupId \u003d Long.parseLong(group.get(\"id\").toString());\n                ConfigurationGroup c \u003d configurationGroupRepository.findById(groupId).orElse(null);\n                configuration.getGroups().add(c);\n                oldGroupIds.add(groupId);\n            }\n        }\n    }","returnType":"void","methodName":"createNewGroupFromJSonForConfiguration","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.createNewGroupFromJSonForConfiguration","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":105,"msArgumentList":[{"returnType":"Configuration"},{"returnType":"Map\u003cString,Object\u003e"},{"returnType":"List\u003cLong\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"private void removeDeletedGroups(Set\u003cConfigurationGroup\u003e configurationGroups,  List\u003cLong\u003e oldGroupIds) {\n        System.out.println(\"oldGroupIds: \" + oldGroupIds);\n        for( ConfigurationGroup configurationGroup : configurationGroups) {\n            System.out.println(\"\\t\"+configurationGroup);\n            if( !oldGroupIds.contains(configurationGroup.getId()) ){\n                System.out.println(\"deleting \"+configurationGroup.getId());\n                ConfigurationGroup c \u003d configurationGroupRepository.findById(configurationGroup.getId()).orElse(null);\n                configurationGroupRepository.delete(c);\n            }\n        }\n    }","returnType":"void","methodName":"removeDeletedGroups","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.removeDeletedGroups","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":133,"msArgumentList":[{"returnType":"Set\u003cConfigurationGroup\u003e"},{"returnType":"List\u003cLong\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/ConfigurationController.java","directoryName":""},"code":"private void printGroup(Map\u003cString, Object\u003e group) {\n        System.out.println(\"Group passed from frontend:\");\n        if(group.get(\"isNew\")!\u003dnull) {\n            System.out.println(\"\\tisNew: \" + Boolean.parseBoolean(group.get(\"isNew\").toString()));\n        }\n        if(group.get(\"category\")!\u003dnull) {\n            System.out.println(\"\\tcategory: \" + Long.parseLong(group.get(\"category\").toString()));\n        }\n        if(group.get(\"count\")!\u003dnull) {\n            System.out.println(\"\\tcount: \" + Integer.parseInt(group.get(\"count\").toString()));\n        }\n        if(group.get(\"level\")!\u003dnull) {\n            System.out.println(\"\\tlevel: \" + Integer.parseInt(group.get(\"level\").toString()));\n        }\n        if(group.get(\"language\")!\u003dnull) {\n            System.out.println(\"\\tlanguage: \" + Integer.parseInt(group.get(\"language\").toString()));\n        }\n    }","returnType":"void","methodName":"printGroup","className":"ConfigurationController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.ConfigurationController.printGroup","classId":"baylor.csi.questionManagement.controller.ConfigurationController","line":146,"msArgumentList":[{"returnType":"Map\u003cString,Object\u003e"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"\")\n    public List\u003cCategory\u003e findAllCategories() {\n        return categoryRepository.findAll();\n    }","returnType":"List\u003cCategory\u003e","methodName":"findAllCategories","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.findAllCategories","classId":"baylor.csi.questionManagement.controller.CategoryController","line":43,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/{categoryId}\")\n    public Category findCategoriesById(@PathVariable Long categoryId) {\n        return categoryRepository.findById(categoryId).orElse(null);\n    }","returnType":"Category","methodName":"findCategoriesById","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.findCategoriesById","classId":"baylor.csi.questionManagement.controller.CategoryController","line":49,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(\"\")\n    public Category createCategory(@Valid @RequestBody Category category) {\n        return categoryRepository.save(category);\n    }","returnType":"Category","methodName":"createCategory","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.createCategory","classId":"baylor.csi.questionManagement.controller.CategoryController","line":55,"msArgumentList":[{"returnType":"Category"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PostMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @PutMapping(\"/{categoryId}\")\n    public Category updateCategory(@PathVariable Long categoryId, @Valid @RequestBody Category categoryRequest) {\n        return categoryRepository.findById(categoryId)\n                .map(category -\u003e {\n                    category.setName(categoryRequest.getName());\n                    category.setDescription(categoryRequest.getDescription());\n                    return categoryRepository.save(category);\n                }).orElseThrow(() -\u003e new ResourceNotFoundException(\"Category not found with id \" + categoryId));\n    }","returnType":"Category","methodName":"updateCategory","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.updateCategory","classId":"baylor.csi.questionManagement.controller.CategoryController","line":61,"msArgumentList":[{"returnType":"Long"},{"returnType":"Category"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"PutMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"/{categoryId}\")\n    public ResponseEntity\u003c?\u003e deleteCateogry(@PathVariable Long categoryId) {\n        return categoryRepository.findById(categoryId)\n                .map(category -\u003e {\n                    category.getQuestions().clear();\n                    List\u003cQuestion\u003e questions \u003d questionRepository.findByCategoryId(categoryId);\n                    for (Question question:questions) {\n                        question.getCategories().remove(category);\n                        questionRepository.save(question);\n                    }\n                    categoryRepository.save(category);\n                    categoryRepository.delete(category);\n                    return ResponseEntity.ok().build();\n                }).orElseThrow(() -\u003e new ResourceNotFoundException(\"Category not found with id \" + categoryId));\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteCateogry","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.deleteCateogry","classId":"baylor.csi.questionManagement.controller.CategoryController","line":72,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @DeleteMapping(\"\")\n    public ResponseEntity\u003c?\u003e deleteAllCategories() {\n        try {\n            categoryRepository.deleteAll();\n        } catch (Exception e) {\n            throw new JPAException(\"Deletion of some categories violate database constraints\");\n        }\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"deleteAllCategories","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.deleteAllCategories","classId":"baylor.csi.questionManagement.controller.CategoryController","line":89,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"DeleteMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @GetMapping(\"/export\")\n    public String exportAllCategories() throws IOException {\n\n        List\u003cCategory\u003e categoryList \u003d categoryRepository.findAll();\n        CategoryListDto categoryListDto \u003d new CategoryListDto(categoryList);\n\n        XmlMapper xmlMapper \u003d new XmlMapper();\n        xmlMapper.enable(SerializationFeature.INDENT_OUTPUT);\n\n        if( categoryListDto !\u003d null)\n            return xmlMapper.writeValueAsString(categoryListDto);\n\n        return \"Failed to export\";\n    }","returnType":"String","methodName":"exportAllCategories","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.exportAllCategories","classId":"baylor.csi.questionManagement.controller.CategoryController","line":100,"msArgumentList":[],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":false,"annotationName":"GetMapping"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/controller/CategoryController.java","directoryName":""},"code":"@CrossOrigin\n    @PostMapping(value \u003d \"/import\")\n    public ResponseEntity\u003c?\u003e uploadCategories(@RequestParam(\"file\") MultipartFile file) throws IOException, ParserConfigurationException, SAXException {\n\n        if (file.isEmpty()) {\n            throw new ResourceNotFoundException(\"File upload fail when importing category(s)\");\n        }\n\n        Set\u003cCategory\u003e categoryList \u003d null;\n\n        byte[] bytes \u003d file.getBytes();\n        InputStream myInputStream \u003d new ByteArrayInputStream(bytes);\n        // create a new DocumentBuilderFactory\n        DocumentBuilderFactory factory \u003d DocumentBuilderFactory.newInstance();\n        // use the factory to create a document builder\n        DocumentBuilder builder \u003d factory.newDocumentBuilder();\n        // create a new document from input stream\n        Document doc \u003d builder.parse(myInputStream);\n        doc.getDocumentElement().normalize();\n        // get NodeList with \"category\" tag\n        NodeList categoryNodeList \u003d doc.getElementsByTagName(\"category\");\n        if(categoryNodeList.getLength() \u003d\u003d 0) {\n            throw new ParsingException(\"XML document doesn\u0027t contain tags with name category\");\n        }\n        categoryList \u003d xmlParserService.parseCategoryNodeList(categoryNodeList, null);\n\n        if( categoryList !\u003d null)\n        {\n            try {\n                categoryRepository.saveAll(categoryList);\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw new JPAException(\"Category import failed. Reason: \" + e.getMessage());\n            }\n        }\n\n        return ResponseEntity.ok().build();\n    }","returnType":"ResponseEntity\u003c?\u003e","methodName":"uploadCategories","className":"CategoryController","packageName":"baylor.csi.questionManagement.controller","methodId":"baylor.csi.questionManagement.controller.CategoryController.uploadCategories","classId":"baylor.csi.questionManagement.controller.CategoryController","line":116,"msArgumentList":[{"returnType":"MultipartFile"}],"msAnnotations":[{"isHttpAnnotation":false,"annotationName":"CrossOrigin"},{"isHttpAnnotation":true,"annotationName":"PostMapping","key":"value","value":"\"/import\""}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/QuestionRepository.java","directoryName":""},"code":"@Query(name \u003d Question.FIND_BY_CATEGORYID_AND_NAME)\n    List\u003cQuestionDto\u003e findByCategoryIdAndName (Long categoryId, String name);","returnType":"List\u003cQuestionDto\u003e","methodName":"findByCategoryIdAndName","className":"QuestionRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.QuestionRepository.findByCategoryIdAndName","classId":"baylor.csi.questionManagement.repository.QuestionRepository","line":15,"msArgumentList":[{"returnType":"Long"},{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Question.FIND_BY_CATEGORYID_AND_NAME"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/QuestionRepository.java","directoryName":""},"code":"@Query(name \u003d Question.FIND_DTO_BY_NAME)\n    List\u003cQuestionDto\u003e findQuestionDtoByName(String name);","returnType":"List\u003cQuestionDto\u003e","methodName":"findQuestionDtoByName","className":"QuestionRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.QuestionRepository.findQuestionDtoByName","classId":"baylor.csi.questionManagement.repository.QuestionRepository","line":17,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Question.FIND_DTO_BY_NAME"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/QuestionRepository.java","directoryName":""},"code":"@Query(name \u003d Question.FIND_BY_CATEGORYID)\n    List\u003cQuestion\u003e findByCategoryId(Long categoryId);","returnType":"List\u003cQuestion\u003e","methodName":"findByCategoryId","className":"QuestionRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.QuestionRepository.findByCategoryId","classId":"baylor.csi.questionManagement.repository.QuestionRepository","line":19,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Question.FIND_BY_CATEGORYID"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/QuestionRepository.java","directoryName":""},"code":"@Query(name \u003d Question.FIND_BY_CATEGORYID_LEVEL_LANGUAGE)\n    List\u003cQuestion\u003e findByCategoryIdAndLevelAndLanguage(Long categoryId, Integer level, Long languageId);","returnType":"List\u003cQuestion\u003e","methodName":"findByCategoryIdAndLevelAndLanguage","className":"QuestionRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.QuestionRepository.findByCategoryIdAndLevelAndLanguage","classId":"baylor.csi.questionManagement.repository.QuestionRepository","line":21,"msArgumentList":[{"returnType":"Long"},{"returnType":"Integer"},{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Question.FIND_BY_CATEGORYID_LEVEL_LANGUAGE"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/QuestionRepository.java","directoryName":""},"code":"@Query(name \u003d Question.FIND_BY_CATEGORYID_LEVEL)\n    List\u003cQuestion\u003e findByCategoryIdAndLevel(Long categoryId, Integer level);","returnType":"List\u003cQuestion\u003e","methodName":"findByCategoryIdAndLevel","className":"QuestionRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.QuestionRepository.findByCategoryIdAndLevel","classId":"baylor.csi.questionManagement.repository.QuestionRepository","line":23,"msArgumentList":[{"returnType":"Long"},{"returnType":"Integer"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Question.FIND_BY_CATEGORYID_LEVEL"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/ConfigurationRepository.java","directoryName":""},"code":"@Query(name \u003d Configuration.FIND_ALL_GROUPS_BY_ID)\n    List\u003cConfigurationGroup\u003e getAllGroupsById(Long configId);","returnType":"List\u003cConfigurationGroup\u003e","methodName":"getAllGroupsById","className":"ConfigurationRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.ConfigurationRepository.getAllGroupsById","classId":"baylor.csi.questionManagement.repository.ConfigurationRepository","line":15,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Configuration.FIND_ALL_GROUPS_BY_ID"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/LanguageRepository.java","directoryName":""},"code":"Language findByName(String name);","returnType":"Language","methodName":"findByName","className":"LanguageRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.LanguageRepository.findByName","classId":"baylor.csi.questionManagement.repository.LanguageRepository","line":9,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/CategoryRepository.java","directoryName":""},"code":"@Query(name \u003d Category.FIND_NAMES_BY_QUESTION_ID)\n    List\u003cString\u003e getNamesByQuestionId(Long id);","returnType":"List\u003cString\u003e","methodName":"getNamesByQuestionId","className":"CategoryRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.CategoryRepository.getNamesByQuestionId","classId":"baylor.csi.questionManagement.repository.CategoryRepository","line":12,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Category.FIND_NAMES_BY_QUESTION_ID"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/CategoryRepository.java","directoryName":""},"code":"@Query(name \u003d Category.FIND_QUESTION_COUNT_DTO_BY_ID)\n    List\u003cQuestionCountDto\u003e getQuestionCountDtoById(Long id);","returnType":"List\u003cQuestionCountDto\u003e","methodName":"getQuestionCountDtoById","className":"CategoryRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.CategoryRepository.getQuestionCountDtoById","classId":"baylor.csi.questionManagement.repository.CategoryRepository","line":14,"msArgumentList":[{"returnType":"Long"}],"msAnnotations":[{"isHttpAnnotation":true,"annotationName":"Query","key":"name","value":"Category.FIND_QUESTION_COUNT_DTO_BY_ID"}]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/CategoryRepository.java","directoryName":""},"code":"Category findByName(String name);","returnType":"Category","methodName":"findByName","className":"CategoryRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.CategoryRepository.findByName","classId":"baylor.csi.questionManagement.repository.CategoryRepository","line":17,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/ChoiceRepository.java","directoryName":""},"code":"List\u003cChoice\u003e findByQuestion(Question question);","returnType":"List\u003cChoice\u003e","methodName":"findByQuestion","className":"ChoiceRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.ChoiceRepository.findByQuestion","classId":"baylor.csi.questionManagement.repository.ChoiceRepository","line":13,"msArgumentList":[{"returnType":"Question"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/repository/CodeRepository.java","directoryName":""},"code":"Code findByQuestionAndAndLanguage(Question question, Language language);","returnType":"Code","methodName":"findByQuestionAndAndLanguage","className":"CodeRepository","packageName":"baylor.csi.questionManagement.repository","methodId":"baylor.csi.questionManagement.repository.CodeRepository.findByQuestionAndAndLanguage","classId":"baylor.csi.questionManagement.repository.CodeRepository","line":11,"msArgumentList":[{"returnType":"Question"},{"returnType":"Language"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/XmlParserService.java","directoryName":""},"code":"public Set\u003cCategory\u003e parseCategoryNodeList(NodeList categoryNodeList, Question question) {\n\n        // It\u0027s assumed that categoryNodeList.getLength() \u003e 0 check is done before calling this method\n        Set\u003cCategory\u003e categoryList \u003d new HashSet\u003c\u003e();\n        for (int i \u003d 0; i \u003c categoryNodeList.getLength(); i++) {\n            Node categoryNode \u003d categoryNodeList.item(i);\n            if (categoryNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE)\n            {\n                Element categoryElement \u003d (Element) categoryNode;\n                Category category \u003d null;\n                // 1. check if \"id\" tag exists: if yes, retrieve corresponding category\n                // If not, check if category with that \"name\" exists: if yes, retrieve corresponding category\n                // if not, create new category\n                if( categoryElement.getElementsByTagName(\"id\").getLength() \u003e 0) {\n                    // if there are multiple \"id\" tags inside category, first one will be parsed\n                    Long categoryId \u003d Long.valueOf(categoryElement.getElementsByTagName(\"id\").item(0).getTextContent());\n                    category \u003d categoryRepository.findById(categoryId).orElse(null);\n                    // TODO: if not null, notify frontend that category with id in XML might be edited\n                }\n                if( category \u003d\u003d null) {\n                    if( categoryElement.getElementsByTagName(\"name\").getLength() \u003e 0) {\n                        // if there are multiple \"name\" tags inside category, first one will be parsed\n                        String categoryName \u003d categoryElement.getElementsByTagName(\"name\").item(0).getTextContent();\n                        category \u003d categoryRepository.findByName(categoryName);\n                        // TODO: if not null, notify frontend that category with name in XML might be edited\n                        if(category \u003d\u003d null) {\n                            category \u003d new Category();\n                            category.setName(categoryName);\n                        }\n                    }\n                    else {\n                        throw new ParsingException(\"Category should have id or name\");\n                    }\n                }\n                // description:\n                if( categoryElement.getElementsByTagName(\"description\").getLength() \u003e 0) {\n                    // if there are multiple \"description\" tags inside category, first one will be parsed\n                    category.setDescription(categoryElement.getElementsByTagName(\"description\").item(0).getTextContent());\n                }\n                if(category.getDescription() \u003d\u003d null) { // || category.getDescription().isEmpty()) {\n                    throw new ParsingException(\"Category should have a description\");\n                }\n                // persist categories: should I?\n                if( category !\u003d  null) {\n                    try {\n                        category \u003d categoryRepository.save(category);\n                        categoryRepository.flush();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        throw new JPAException(\"Category save in Question import failed. Reason: \" + e.getMessage());\n                    }\n                }\n\n                // Question:\n                if( question !\u003d null) {\n                    category.getQuestions().add(question);\n                }\n                categoryList.add(category);\n            }\n        }\n        return categoryList;\n    }","returnType":"Set\u003cCategory\u003e","methodName":"parseCategoryNodeList","className":"XmlParserService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.XmlParserService.parseCategoryNodeList","classId":"baylor.csi.questionManagement.service.XmlParserService","line":31,"msArgumentList":[{"returnType":"NodeList"},{"returnType":"Question"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/XmlParserService.java","directoryName":""},"code":"private Set\u003cChoice\u003e parseChoiceNodeList(NodeList choiceNodeList, Question question)\n    {\n        // It\u0027s assumed that choiceNodeList.getLength() \u003e 0 check is done before calling this method\n        Set\u003cChoice\u003e choiceList \u003d new HashSet\u003c\u003e();\n        for (int i \u003d 0; i \u003c choiceNodeList.getLength(); i++) {\n            Node choiceNode \u003d choiceNodeList.item(i);\n            if (choiceNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE)\n            {\n                Element choiceElement \u003d (Element) choiceNode;\n                Choice choice \u003d null;\n                if( choiceElement.getElementsByTagName(\"id\").getLength() \u003e 0) {\n                    // if there are multiple \"id\" tags inside choice, first one will be parsed\n                    Long choiceId \u003d Long.valueOf(choiceElement.getElementsByTagName(\"id\").item(0).getTextContent());\n                    choice \u003d choiceRepository.findById(choiceId).orElse(null);\n                    // if choice already exists, then Question associated with it must be same. If not, create new Choice\n                    if( choice !\u003d null) {\n                        if( question !\u003d null) {\n                            if( choice.getQuestion() !\u003d question) {\n                                choice \u003d new Choice();\n                            }\n                            /// TODO: else, notify frontend that choice with id in XML might be edited\n                        }\n                        else {\n                            throw new ParsingException(\"Choice must be associated with question\");\n                        }\n                    }\n                }\n                if(choice \u003d\u003d null) {\n                    choice \u003d new Choice();\n                }\n                // body:\n                if( choiceElement.getElementsByTagName(\"body\").getLength() \u003e 0) {\n                    // if there are multiple \"body\" tags inside choice, first one will be parsed\n                    choice.setBody(choiceElement.getElementsByTagName(\"body\").item(0).getTextContent());\n                }\n                if( choice.getBody() \u003d\u003d null ) {\n                    throw new ParsingException(\"Choice should have a body\");\n                }\n                // correct:\n                if( choiceElement.getElementsByTagName(\"correct\").getLength() \u003e 0) {\n                    // if there are multiple \"correct\" tags inside choice, first one will be parsed\n                    choice.setCorrect(Boolean.parseBoolean(choiceElement.getElementsByTagName(\"correct\").item(0).getTextContent()));\n                }\n                if( choice.getCorrect() \u003d\u003d null ) {\n                    // by default, Answer choice will be wrong (false):\n                    choice.setCorrect(false);\n                }\n                // Question:\n                if( question !\u003d null) {\n                    choice.setQuestion(question);\n                }\n                choiceList.add(choice);\n            }\n        }\n\n        return choiceList;\n    }","returnType":"Set\u003cChoice\u003e","methodName":"parseChoiceNodeList","className":"XmlParserService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.XmlParserService.parseChoiceNodeList","classId":"baylor.csi.questionManagement.service.XmlParserService","line":94,"msArgumentList":[{"returnType":"NodeList"},{"returnType":"Question"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/XmlParserService.java","directoryName":""},"code":"public Set\u003cLanguage\u003e parseLanguageNodeList(NodeList languageNodeList) {\n        // It\u0027s assumed that codeNodeList.getLength() \u003e 0 check is done before calling this method\n        Set\u003cLanguage\u003e languageList \u003d new HashSet\u003c\u003e();\n        for (int i \u003d 0; i \u003c languageNodeList.getLength(); i++) {\n            Node languageNode \u003d languageNodeList.item(i);\n            if (languageNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE)\n            {\n                Element languageElement \u003d (Element) languageNode;\n                Language language \u003d null;\n                if( languageElement.getElementsByTagName(\"id\").getLength() \u003e 0) {\n                    // if there are multiple \"id\" tags inside language, first one will be parsed\n                    Long languageId \u003d Long.valueOf(languageElement.getElementsByTagName(\"id\").item(0).getTextContent());\n                    language \u003d languageRepository.findById(languageId).orElse(null);\n                }\n                if(language \u003d\u003d null) {\n                    if( languageElement.getElementsByTagName(\"name\").getLength() \u003e 0) {\n                        // if there are multiple \"name\" tags inside category, first one will be parsed\n                        String languageName \u003d languageElement.getElementsByTagName(\"name\").item(0).getTextContent();\n                        language \u003d languageRepository.findByName(languageName);\n                        if(language \u003d\u003d null) {\n                            language \u003d new Language();\n                            language.setName(languageName);\n                        }\n                    }\n                    else {\n                        throw new ParsingException(\"Language should have id or name\");\n                    }\n                }\n                languageList.add(language);\n            }\n        }\n        return languageList;\n    }","returnType":"Set\u003cLanguage\u003e","methodName":"parseLanguageNodeList","className":"XmlParserService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.XmlParserService.parseLanguageNodeList","classId":"baylor.csi.questionManagement.service.XmlParserService","line":152,"msArgumentList":[{"returnType":"NodeList"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/XmlParserService.java","directoryName":""},"code":"private Set\u003cCode\u003e parseCodeNodeList(NodeList codeNodeList, Question question)\n    {\n        // It\u0027s assumed that codeNodeList.getLength() \u003e 0 check is done before calling this method\n        Set\u003cCode\u003e codeList \u003d new HashSet\u003c\u003e();\n        for (int i \u003d 0; i \u003c codeNodeList.getLength(); i++) {\n            Node codeNode \u003d codeNodeList.item(i);\n            if (codeNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE)\n            {\n                Element codeElement \u003d (Element) codeNode;\n                Code code \u003d null;\n                if( codeElement.getElementsByTagName(\"id\").getLength() \u003e 0) {\n                    // if there are multiple \"id\" tags inside code, first one will be parsed\n                    Long codeId \u003d Long.valueOf(codeElement.getElementsByTagName(\"id\").item(0).getTextContent());\n                    code \u003d codeRepository.findById(codeId).orElse(null);\n                    // if code already exists, then Question associated with it must be same. If not, create new Code\n                    if( code !\u003d null) {\n                        if( question !\u003d null) {\n                            if( code.getQuestion() !\u003d question) {\n                                code \u003d new Code();\n                            }\n                            /// TODO: else, notify frontend that code with id in XML might be edited\n                        }\n                        else {\n                            throw new ParsingException(\"Code must be associated with question\");\n                        }\n                    }\n                }\n                if(code \u003d\u003d null) {\n                    code \u003d new Code();\n                }\n                // body:\n                if( codeElement.getElementsByTagName(\"body\").getLength() \u003e 0) {\n                    // if there are multiple \"body\" tags inside choice, first one will be parsed\n                    code.setBody(codeElement.getElementsByTagName(\"body\").item(0).getTextContent());\n                }\n                // language:\n                if( codeElement.getElementsByTagName(\"language\").getLength() \u003e 0) {\n                    // if there are multiple \"language\" tags inside code, first one will be parsed\n                    Set\u003cLanguage\u003e languageSet \u003d parseLanguageNodeList(codeElement.getElementsByTagName(\"language\"));\n                    if( languageSet.isEmpty()) {\n                        throw new ParsingException(\"Couldn\u0027t parse a language inside code\");\n                    }\n                    Language language \u003d languageSet.iterator().next();\n                    if(language !\u003d null) {\n                        language \u003d languageRepository.save(language);\n                        languageRepository.flush();\n                    }\n                    code.setLanguage(language);\n                }\n                if( code.getBody() \u003d\u003d null || code.getLanguage() \u003d\u003d null) {\n                    throw new ParsingException(\"Code must have body and language\");\n                }\n                // Question:\n                if( question !\u003d null) {\n                    code.setQuestion(question);\n                }\n                codeList.add(code);\n            }\n        }\n\n        return codeList;\n    }","returnType":"Set\u003cCode\u003e","methodName":"parseCodeNodeList","className":"XmlParserService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.XmlParserService.parseCodeNodeList","classId":"baylor.csi.questionManagement.service.XmlParserService","line":187,"msArgumentList":[{"returnType":"NodeList"},{"returnType":"Question"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/XmlParserService.java","directoryName":""},"code":"private Question parseQuestion(Question question, Element questionElement, boolean isEdit)\n    {\n        // title:\n        if( questionElement.getElementsByTagName(\"title\").getLength() \u003e 0) {\n            // if there are multiple \"title\" tags inside question, first one will be parsed\n            question.setTitle(questionElement.getElementsByTagName(\"title\").item(0).getTextContent());\n        }\n        // body:\n        if( questionElement.getElementsByTagName(\"body\").getLength() \u003e 0) {\n            // if there are multiple \"body\" tags inside question, first one will be parsed\n            question.setBody(questionElement.getElementsByTagName(\"body\").item(0).getTextContent());\n        }\n        // level:\n        if( questionElement.getElementsByTagName(\"level\").getLength() \u003e 0) {\n            // if there are multiple \"level\" tags inside question, first one will be parsed\n            question.setLevel(Integer.valueOf(questionElement.getElementsByTagName(\"level\").item(0).getTextContent()));\n        }\n        if( question.getTitle() \u003d\u003d null || question.getLevel() \u003d\u003d null || question.getBody() \u003d\u003d null) {\n            throw new ParsingException(\"New question must have title, body and level\");\n        }\n        // categories:\n        // TODO: what if no Category was chosen? (question.getCategories().size() \u003d\u003d 0)\n        Set\u003cCategory\u003e categoryList \u003d null;\n        NodeList categoryNodeList \u003d questionElement.getElementsByTagName(\"category\");\n        if( categoryNodeList.getLength() \u003e 0) {\n            categoryList \u003d parseCategoryNodeList(categoryNodeList, question);\n            question.setCategories(categoryList);\n        }\n        //type:\n        if( questionElement.getElementsByTagName(\"type\").getLength() \u003e 0) {\n            String typeFromFile \u003d questionElement.getElementsByTagName(\"type\").item(0).getTextContent();\n            question.setQuestionType(QuestionTypeEnum.valueOfLabel(typeFromFile));\n        }\n        else{\n            question.setQuestionType(QuestionTypeEnum.SELECT_MANY);\n        }\n        // choices:\n        Set\u003cChoice\u003e choiceList \u003d null;\n        NodeList choiceNodeList \u003d questionElement.getElementsByTagName(\"choice\");\n        if( choiceNodeList.getLength() \u003e 0) {\n            choiceList \u003d parseChoiceNodeList(choiceNodeList, question);\n            // check that there is at least one correct answer choice:\n            int numOfCorrectChoices \u003d 0;\n            for( Choice ch : choiceList) {\n                if( ch.getCorrect()) {\n                    numOfCorrectChoices++;\n                }\n            }\n            if( numOfCorrectChoices \u003d\u003d 0) {\n                throw new ParsingException(\"There must be at least one correct choice for Question with title \u0027\" + question.getTitle() + \"\u0027\");\n            }\n            else if( numOfCorrectChoices \u003e 1) {\n                if(question.getQuestionType() \u003d\u003d QuestionTypeEnum.SELECT_ONE) {\n                    throw new ParsingException(\"Question with type SELECT_ONE can\u0027t have more than one correct answer choice for Question with title \u0027\" + question.getTitle() + \"\u0027\");\n                }\n            }\n            question.setChoices(choiceList);\n        }\n        else if (choiceNodeList.getLength() \u003d\u003d 0) {\n            if( question.getQuestionType() !\u003d QuestionTypeEnum.TEXT) {\n                throw new ParsingException(\"Questions that are not type of TextInput should have at least one answer choice. Question with title \u0027\" + question.getTitle() + \"\u0027\");\n            }\n        }\n        // TODO: what if no Answer Choice was added? (question.getChoices().size() \u003d\u003d 0)\n        // codes:\n        Set\u003cCode\u003e codeList \u003d null;\n        NodeList codeNodeList \u003d questionElement.getElementsByTagName(\"code\");\n        if( codeNodeList.getLength() \u003e 0) {\n            codeList \u003d parseCodeNodeList(codeNodeList, question);\n            question.setCodes(codeList);\n        }\n\n        return question;\n    }","returnType":"Question","methodName":"parseQuestion","className":"XmlParserService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.XmlParserService.parseQuestion","classId":"baylor.csi.questionManagement.service.XmlParserService","line":250,"msArgumentList":[{"returnType":"Question"},{"returnType":"Element"},{"returnType":"boolean"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/XmlParserService.java","directoryName":""},"code":"public Set\u003cQuestion\u003e parseQuestionNodeList(NodeList questionNodeList) {\n\n        Set\u003cQuestion\u003e questionList \u003d new HashSet\u003c\u003e();\n        for (int i \u003d 0; i \u003c questionNodeList.getLength(); i++)\n        {\n            Node node \u003d questionNodeList.item(i);\n            System.out.println(\"\");    //Just a separator\n            if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE)\n            {\n                //Print each employee\u0027s detail\n                Element questionElement \u003d (Element) node;\n                // Check if id tag exists:\n                // if yes, edit existing Question\n                Question question \u003d null;\n                if( questionElement.getElementsByTagName(\"id\").getLength() \u003e 0) {\n                    // if there are multiple \"id\" tags inside question, first one will be parsed\n                    Long questionID \u003d Long.valueOf( questionElement.getElementsByTagName(\"id\").item(0).getTextContent());\n                    question \u003d questionRepository.findById(questionID).orElse(null);\n                    if( question !\u003d null){\n                        try {\n                            question \u003d parseQuestion(question, questionElement, true);\n                            // TODO: notify frontend that question with id in XML might be edited\n                        } catch (NumberFormatException e) {\n                            throw new ParsingException(\"Error parsing numeric input. Reason : \" + e.getMessage());\n                        }\n\n                    }\n                }\n                // if not, create new one.\n                if( question \u003d\u003d null) {\n                    question \u003d new Question();\n                    question \u003d parseQuestion(question, questionElement, false);\n                }\n                questionList.add(question);\n            }\n        }\n        return questionList;\n    }","returnType":"Set\u003cQuestion\u003e","methodName":"parseQuestionNodeList","className":"XmlParserService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.XmlParserService.parseQuestionNodeList","classId":"baylor.csi.questionManagement.service.XmlParserService","line":325,"msArgumentList":[{"returnType":"NodeList"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/JavaSyntaxCheckService.java","directoryName":""},"code":"public String check(String codeBlock) {\n\n        String message \u003d \"\";\n\n        int codeBlockType \u003d ASTParser.K_STATEMENTS;\n        if(codeBlock.contains(\"class \")) {\n            codeBlockType \u003d ASTParser.K_COMPILATION_UNIT;\n        }\n        else {\n            throw new SyntaxCheckException(\"Java code should be inside class\");\n        }\n        ASTParser codeBlockParser \u003d ASTParser.newParser(AST.JLS3);\n        codeBlockParser.setKind(codeBlockType);\n        codeBlockParser.setSource(codeBlock.toCharArray());\n        codeBlockParser.setResolveBindings(true);\n        ASTNode astNode \u003d codeBlockParser.createAST(null);\n\n        if( codeBlockType \u003d\u003d ASTParser.K_COMPILATION_UNIT) {\n            System.out.println(\"type: ASTParser.K_COMPILATION_UNIT\");\n            CompilationUnit compilationUnit \u003d (CompilationUnit) astNode;\n            compilationUnit.recordModifications();\n            return printErrors(compilationUnit);\n        }\n        else if (codeBlockType \u003d\u003d ASTParser.K_STATEMENTS) {\n            System.out.println(\"type: ASTParser.K_STATEMENTS\");\n            Block block_of_code \u003d (Block) astNode;\n\n            ASTParser parser \u003d ASTParser.newParser(AST.JLS3);\n            parser.setKind(ASTParser.K_COMPILATION_UNIT);\n            parser.setSource(\"\".toCharArray());\n            CompilationUnit compilationUnit \u003d (CompilationUnit) parser.createAST(null);\n            compilationUnit.recordModifications();\n            AST ast \u003d compilationUnit.getAST();\n\n            TypeDeclaration typeDeclaration \u003d ast.newTypeDeclaration();\n            typeDeclaration.setName(ast.newSimpleName(\"Test\"));\n            typeDeclaration.bodyDeclarations().add(block_of_code);\n            compilationUnit.types().add(typeDeclaration);\n\n            return printErrors(compilationUnit);\n        }\n\n        return message;\n    }","returnType":"String","methodName":"check","className":"JavaSyntaxCheckService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.JavaSyntaxCheckService.check","classId":"baylor.csi.questionManagement.service.JavaSyntaxCheckService","line":17,"msArgumentList":[{"returnType":"String"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/JavaSyntaxCheckService.java","directoryName":""},"code":"private String printErrors(CompilationUnit cu) {\n\n        String message \u003d \"\";\n//        printResultingCode(cu);\n\n        IProblem[] problems \u003d cu.getProblems();\n        AST ast \u003d cu.getAST();\n        for(IProblem problem : problems) {\n            if(problem.isError()) {\n                message +\u003d \"ERROR: Line [\" + problem.getSourceLineNumber() + \"] - \" + problem.getMessage() + problem.getSourceStart() + \"\\n\";\n                System.out.println(\"ERROR: Line [\" + problem.getSourceLineNumber() + \"] - \" + problem.getMessage() + problem.getSourceStart());\n            }\n            else if (problem.isWarning()) {\n                message +\u003d \"WARNING: Line [\" + problem.getSourceLineNumber() + \"] - \" + problem.getMessage() + problem.getSourceStart() + \"\\n\";\n                System.out.println(\"WARNING: Line [\" + problem.getSourceLineNumber() + \"] - \" + problem.getMessage() + problem.getSourceStart());\n            }\n        }\n\n        CustomASTVisitor customASTVisitor \u003d new CustomASTVisitor(cu);\n        cu.accept(customASTVisitor);\n        message +\u003d customASTVisitor.message;\n\n        return message;\n    }","returnType":"String","methodName":"printErrors","className":"JavaSyntaxCheckService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.JavaSyntaxCheckService.printErrors","classId":"baylor.csi.questionManagement.service.JavaSyntaxCheckService","line":62,"msArgumentList":[{"returnType":"CompilationUnit"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/JavaSyntaxCheckService.java","directoryName":""},"code":"private void printResultingCode(CompilationUnit cu) {\n        // Print the resulting document\n        Document document \u003d new Document();\n        TextEdit edits \u003d cu.rewrite(document, null);\n        try {\n            edits.apply(document);\n        } catch (BadLocationException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Resulting document:\");\n        System.out.println(document.get());\n    }","returnType":"void","methodName":"printResultingCode","className":"JavaSyntaxCheckService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.JavaSyntaxCheckService.printResultingCode","classId":"baylor.csi.questionManagement.service.JavaSyntaxCheckService","line":87,"msArgumentList":[{"returnType":"CompilationUnit"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/QuestionService.java","directoryName":""},"code":"public List\u003cQuestionSingleCodeDto\u003e getQuestionSingleCodeDtosByConfigGroup(ConfigurationGroup group) {\n        Integer[] indexs \u003d new Integer[group.getCount()];\n        List\u003cQuestionSingleCodeDto\u003e questionSingleCodeDtos \u003d new ArrayList\u003c\u003e();\n        List\u003cQuestion\u003e tempQuestions;\n        Language language;\n        if (group.getLanguageId() !\u003d null) {\n            tempQuestions \u003d questionRepository.findByCategoryIdAndLevelAndLanguage(group.getCategory(), group.getLevel(), group.getLanguageId());\n            language \u003d languageRepository.findById(group.getLanguageId()).orElse(null);\n        } else {\n            tempQuestions \u003d questionRepository.findByCategoryIdAndLevel(group.getCategory(), group.getLevel());\n            language \u003d null;\n        }\n        if (tempQuestions.size() \u003c group.getCount()) {\n            throw new JPAException(\"Questions for \" + group.getCategory() + \" \" + group.getLevel() + \" \" + group.getLanguageId() + \" are not enough, please check the configuration \");\n        } else if (tempQuestions.size() \u003d\u003d group.getCount()) {\n            for(int i\u003d0;i\u003cgroup.getCount();i++) {\n                indexs[i] \u003d i;\n            }\n        } else {\n            indexs\u003dgetRandomNumList(group.getCount(),0,tempQuestions.size());\n        }\n\n\n        for (int i \u003d 0; i \u003c indexs.length; i++) {\n            Question tmpQuestion \u003d tempQuestions.get(indexs[i]);\n            Code code \u003d null;\n            if (language !\u003d null) {\n                code \u003d codeRepository.findByQuestionAndAndLanguage(tmpQuestion, language);\n            }\n            List\u003cChoice\u003e choices \u003d choiceRepository.findByQuestion(tmpQuestion);\n            questionSingleCodeDtos.add(new QuestionSingleCodeDto(tmpQuestion.getTitle(), tmpQuestion.getLevel(), tmpQuestion.getBody(), code, choices, tmpQuestion.getQuestionType().toString()));\n        }\n        return questionSingleCodeDtos;\n\n\n    }","returnType":"List\u003cQuestionSingleCodeDto\u003e","methodName":"getQuestionSingleCodeDtosByConfigGroup","className":"QuestionService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.QuestionService.getQuestionSingleCodeDtosByConfigGroup","classId":"baylor.csi.questionManagement.service.QuestionService","line":30,"msArgumentList":[{"returnType":"ConfigurationGroup"}],"msAnnotations":[]},{"msId":{"path":"/qms/src/main/java/baylor/csi/questionManagement/service/QuestionService.java","directoryName":""},"code":"private static Integer[] getRandomNumList(int nums,int start,int end){\n        List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();\n\n        Random r \u003d new Random();\n\n        while(list.size() !\u003d nums){\n            int num \u003d r.nextInt(end-start) + start;\n            if(!list.contains(num)){\n                list.add(num);\n            }\n        }\n\n        return list.stream().toArray(Integer[]::new);\n    }","returnType":"Integer[]","methodName":"getRandomNumList","className":"QuestionService","packageName":"baylor.csi.questionManagement.service","methodId":"baylor.csi.questionManagement.service.QuestionService.getRandomNumList","classId":"baylor.csi.questionManagement.service.QuestionService","line":67,"msArgumentList":[{"returnType":"int"},{"returnType":"int"},{"returnType":"int"}],"msAnnotations":[]}]